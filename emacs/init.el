;;; init.el --- My init.el auto-generated by leaf-manager  -*- lexical-binding: t; -*-

;; Copyright (C) 2020-2022 Yoshihiro Ichinose

;; Author: Yoshihiro Ichinose <solenoid@MN057.local>

;; solenoid emacs

;;; Commentary:

;; My init.el auto-generated by leaf-manager.

;;; Code:

(prog1 'emacs
  (eval-and-compile
    (when (or load-file-name byte-compile-current-file)
      (setq user-emacs-directory (expand-file-name
                                  (file-name-directory
                                   (or load-file-name byte-compile-current-file))))))

  (eval-and-compile
    (customize-set-variable 'package-archives
                            '(("org" . "https://orgmode.org/elpa/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (defvar bootstrap-version)
    (let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer (url-retrieve-synchronously "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el" 'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
    (straight-use-package 'leaf)
    (leaf leaf-convert
      :ensure t)

    (leaf leaf-keywords
      :ensure t
      :init
      (leaf blackout
        :ensure t)

      :config
      (leaf-keywords-init))

    (leaf global
      :tag "global"
      :custom ((tab-width . 2)
               (indent-tabs-mode)
               (inhibit-startup-message . t))
      :config
      (scroll-bar-mode 0)
      (global-auto-revert-mode t)
      (set-frame-font "FiraCode Nerd Font-14" t t)
      (blink-cursor-mode 0)
      (add-hook 'find-file-hook
                '(lambda nil
                   (cond
                    ((string-match "undecided-?.*"
                                   (format "%s" buffer-file-coding-system))
                     (let ((coding-system-for-read 'utf-8))
                       (revert-buffer t t)))))))

    (leaf frame
      :doc "フレームサイズ・位置などの設定"
      :tag "global"
      :config
      (setq initial-frame-alist (append
                                 (list
                                  '(width . 100)
                                  '(height . 40))
                                 initial-frame-alist))
      (setq default-frame-alist initial-frame-alist))

    (leaf backup
      :tag "global"
      :custom `((make-backup-files)
                (backup-directory-alist quote
                                        (("" . "~/.emacs.d/.backup")))
                (delete-old-versions . t)))

    (leaf mode-line
      :tag "global mode-line"
      :config
      (column-number-mode t)
      (menu-bar-mode -1)
      (tool-bar-mode 0))

    (leaf elisp-mode
      :tag "language elisp"
      :config
      (leaf eldoc
        :blackout t
        :hook emmacs-lisp-mode-hook
        :custom ((eldoc-idle-delay . 0.2)
                 (eldoc-echo-area-use-multiline-p . t))
        :config
        (turn-on-eldoc-mode)))

    (with-eval-after-load 'org-superstar
      (setq org-superstar-todo-bullet-face-alist '(("TODO" :inherit base-todo-keyword-face :foreground "#FF8580")
                                                   ("ISSUE" :inherit base-todo-keyword-face :foreground "#FF8580" :family "github-octicons" :height 160)
                                                   ("BRANCH" :inherit base-todo-keyword-face :foreground "#D58422" :family "github-octicons")
                                                   ("FORK" :inherit base-todo-keyword-face :foreground "#D58422" :family "github-octicons")
                                                   ("MR" :inherit base-todo-keyword-face :foreground "#C7A941" :family "github-octicons")
                                                   ("MERGED" :inherit base-todo-keyword-face :foreground "#75AD18" :family "github-octicons")
                                                   ("GITHUB" :inherit base-todo-keyword-face :foreground "#BBBBBB" :family "github-octicons" :height 160)
                                                   ("DONE" :inherit base-todo-keyword-face :foreground "#75AD18")
                                                   ("IDEA" :inherit base-todo-keyword-face :foreground "#85AAFF")
                                                   ("WRITE" :inherit base-todo-keyword-face :foreground "#FF8580")
                                                   ("WRITING" :inherit base-todo-keyword-face :foreground "#C7A941")))
      (setq org-superstar-todo-bullet-alist 'nil)
      (setq org-superstar-special-todo-items t)
      (setq org-superstar-leading-bullet ""))))

(leaf leaf-manager
  :straight t
  :custom ((leaf-manager-template-license . ";; solenoid emacs"))
  :config
  (leaf affe
    :straight t
    :custom ((affe-find-command . "fd"))
    :config
    )

  (leaf all-the-icons
    :doc "A library for inserting Developer icons"
    :req "emacs-24.3"
    :tag "lisp" "convenient" "emacs>=24.3"
    :url "https://github.com/domtronn/all-the-icons.el"
    :added "2021-10-26"
    :emacs>= 24.3
    :straight t
    :defun (all-the-icons-icon-family-for-buffer)
    :config
    (defun custom-modeline-mode-icon nil
      (format " %s"
              (propertize icon 'help-echo
                          (format "Major-mode: `%s`" major-mode)
                          'face
                          `(:height 1.2 :family ,(all-the-icons-icon-family-for-buffer)))))

    (setq mode-line-format '("%e"
                             (:eval
                              (concat
                               (custom-modeline-mode-icon))))))

  (leaf annalist
    :doc "Record and display information such as keybindings"
    :req "emacs-24.4" "cl-lib-0.5"
    :tag "org" "keybindings" "tools" "convenience" "emacs>=24.4"
    :url "https://github.com/noctuid/annalist.el"
    :added "2022-01-10"
    :emacs>= 24.4
    :straight t
    :require t)

  (leaf auto-package-update
    :doc "パッケージ更新"
    :straight t
    :require t
    :custom ((auto-package-update-interval . 30))
    :defun (auto-package-update-maybe)
    :config
    (auto-package-update-maybe))

  (leaf company
    :doc "Modular text completion framework"
    :req "emacs-25.1"
    :tag "matching" "convenience" "abbrev" "emacs>=25.1"
    :url "http://company-mode.github.io/"
    :added "2021-10-26"
    :emacs>= 25.1
    :straight t
    :global-minor-mode global-company-mode
    :blackout (company-mode . " ")
    :defvar (company-backends company-transformers)
    :custom ((company-idle-delay . 0)
             (company-minimum-prefix-length . 2)
             (company-selection-wrap-around . t)
             (completion-ignore-case . t)
             (company-dabbrev-downcase)
             (company-require-match)
             (company-tooltip-align-annotations . t)
             (company-eclim-auto-save)
             (company-backends \`
                               (company-elisp company-capf company-nxml company-css company-bbdb company-cmake company-files company-dabbrev-code company-dabbrev
                                              (company-gtags company-etags company-keywords)
                                              company-oddmuse)))
    :defvar (company-active-map)
    :config
    (general-define-key :states 'motion :keymap company-active-map "M-n" nil "M-p" nil "C-h" nil "C-j" 'company-select-next "C-k" 'company-select-previous)
    (general-define-key :states 'insert "C-SPC" 'company-complete))

  (leaf company-emoji
    :doc "company-mode backend for emoji"
    :req "cl-lib-0.5" "company-0.8.0"
    :tag "company" "emoji"
    :url "https://github.com/dunn/company-emoji.git"
    :added "2021-10-26"
    :straight t
    :after company)

  (leaf company-math
    :doc "Completion backends for unicode math symbols and latex tags"
    :req #("company-0.8.0" 0 7
           (face nil)) "math-symbol-lists-1.3"
    :tag "completion" "symbols" "unicode"
    :url "https://github.com/vspinu/company-math"
    :added "2021-10-26"
    :straight t
    :after company math-symbol-lists)

  (leaf company-org-block
    :doc "Org blocks company backend"
    :req "emacs-25.1" "company-0.8.0" "org-9.2.0"
    :tag "emacs>=25.1"
    :url "https://github.com/xenodium/company-org-block"
    :added "2021-10-26"
    :emacs>= 25.1
    :straight t
    :after company org)

  (leaf company-statistics
    :doc "Sort candidates using completion history"
    :req "emacs-24.3" #("company-0.8.5" 0 7
                        (face nil))
    :tag "matching" "convenience" "abbrev" "emacs>=24.3"
    :url "https://github.com/company-mode/company-statistics"
    :added "2021-10-26"
    :emacs>= 24.3
    :straight t
    :after company
    :global-minor-mode t)

  (leaf company-wordfreq
    :doc "Company backend for human language texts"
    :req "emacs-27.1" #("company-0.9" 0 7
                        (face nil))
    :tag "matching" "convenience" "company" "emacs>=27.1"
    :url "https://github.com/johannes-mueller/company-wordfreq.el"
    :added "2021-10-26"
    :emacs>= 27.1
    :straight t
    :after company
    :config
    (add-hook 'org-mode-hook
              (lambda nil
                (setq-local company-backends
                            '(company-wordfreq))
                (setq-local company-transformers nil))))

  (leaf consult
    :straight t
    :defun (project-roots)
    :bind* (("C-x f b" . consult-buffer)
            ("C-x f r" . consult-recent-file))
    :custom ((consult-find-command . "fd --color=always --full-path ARG OPTS")
             (consult-project-root-function lambda nil
                                            (when-let (project
                                                       (project-current))
                                              (car (project-roots project))))))

  (leaf dashboard
    :doc "起動時の画面を改造できる"
    :disabled nil
    :straight t
    :require t
    :defvar (dashboard-banner-logo-title dashboard-startup-banner dashboard-center-content dashboard-set-heading-icons dashboard-set-file-icons dashboard-init-info dashboard-set-init-info dashboard-set-navigator dashboard-items)
    :setq ((dashboard-banner-logo-title . "神は天に在り、世はすべてこともなし")
           (dashboard-startup-banner . "~/.emacs.d/logo.png")
           (dashboard-center-content . t)
           (dashboard-set-init-info . t)
           (dashboard-set-navigator . t)
           (dashboard-items quote
                            ((recents . 15)
                             (bookmarks . 5)
                             (projects . 5)
                             (agenda . 5))))
    :defun (dashboard-setup-startup-hook)
    :config
    (dashboard-setup-startup-hook))

  (leaf disable-mouse
    :doc "Disable mouse commands globally"
    :req "emacs-24.1"
    :tag "mouse" "emacs>=24.1"
    :url "https://github.com/purcell/disable-mouse"
    :added "2021-10-26"
    :emacs>= 24.1
    :straight t
    :global-minor-mode global-disable-mouse-mode)

  (leaf doom-themes
    :doc "beautiful color scheme"
    :tag "color-theme"
    :straight t
    :config
    (load-theme 'doom-dracula t))

  (leaf embark
    :straight t)

  (leaf embark-consult
    :straight t
    :after embark consult)

  (leaf evil
    :doc "Extensible Vi layer for Emacs."
    :req "emacs-24.1" "goto-chg-1.6" "cl-lib-0.5"
    :tag "vim" "emulation" "emacs>=24.1"
    :url "https://github.com/emacs-evil/evil"
    :added "2022-01-10"
    :emacs>= 24.1
    :straight t
    :after goto-chg
    :require t
    :global-minor-mode evil-mode
    :custom ((evil-want-keybinding)
             (evil-want-integration . t))
    :config
    (leaf evil-keymapping
      :after general
      :config
      (general-define-key :states 'normal :keymaps 'override "SPC f"
                          (general-simulate-key "C-x f" :which-key "find")
                          "SPC h"
                          (general-simulate-key "C-h" :which-key "help"))
      (general-define-key :states 'normal :keymaps
                          '(org-mode-map)
                          "SPC i"
                          (general-simulate-key "C-x i" :which-key "insert"))
      (general-define-key :states 'normal :keymaps 'org-mode-map "SPC c"
                          (general-simulate-key "C-x c" :which-key "clock"))))

  (leaf evil-collection
    :doc "A set of keybindings for Evil mode"
    :req "emacs-25.1" "evil-1.2.13" "annalist-1.0"
    :tag "tools" "evil" "emacs>=25.1"
    :url "https://github.com/emacs-evil/evil-collection"
    :added "2022-01-10"
    :emacs>= 25.1
    :straight t
    :after evil annalist
    :require t
    :config
    (evil-collection-init))

  (leaf exec-path-from-shell
    :doc "シェルの環境変数を引き継ぐ"
    :straight t
    :disabled t
    :defun (exec-path-from-shell-initialize)
    :config
    (when (memq window-system
                '(mac ns x))
      (exec-path-from-shell-initialize)))

  (leaf fira-code-mode
    :straight t
    :doc "M-x fira-code-mode-install-fonts RET"
    :doc "ligatureの経緯: ligature.elを使ってたけどskkと干渉を起してしまったのでfira-code-modeに移行"
    :tag "font" "fira-code"
    :blackout t
    :hook (prog-mode-hook))

  (leaf general
    :doc "Convenience wrappers for keybindings."
    :req "emacs-24.4" "cl-lib-0.5"
    :tag "keys" "keybindings" "leader" "evil" "vim" "emacs>=24.4"
    :url "https://github.com/noctuid/general.el"
    :added "2022-01-09"
    :emacs>= 24.4
    :straight t
    :require t)

  (leaf goto-chg
    :doc "Go to last change"
    :req "emacs-24.1"
    :tag "matching" "convenience" "emacs>=24.1"
    :url "https://github.com/emacs-evil/goto-chg"
    :added "2022-01-10"
    :emacs>= 24.1
    :straight t
    :require t)

  (leaf hungry-delete
    :doc "賢くデリートしてくれる"
    :disabled nil
    :straight t
    :require t
    :blackout t
    :global-minor-mode global-hungry-delete-mode)

  (leaf kotlin-mode
    :straight t
    :require t
    :disabled nil)

  (leaf lsp-mode
    :straight t
    :disabled nil
    :hook (rust-mode-hook . lsp)
    :custom ((lsp-rust-server quote rust-analyzer))
    :defvar (lsp-keymap-prefix)
    :setq ((lsp-keymap-prefix . "C-l")))

  (leaf lsp-ui
    :disabled nil
    :straight t)

  (leaf macrostep
    :doc "マクロを順次展開していく"
    :straight t
    :defun (macrostep-expand)
    :bind ((:emacs-lisp-mode-map
            ("C-c e" . macrostep-expand))))

  (leaf magit
    :doc "A Git porcelain inside Emacs."
    :req "emacs-25.1" "dash-20210826" "git-commit-20211004" "magit-section-20211004" "transient-20210920" "with-editor-20211001"
    :tag "vc" "tools" "git" "emacs>=25.1"
    :url "https://github.com/magit/magit"
    :added "2021-10-26"
    :emacs>= 25.1
    :straight t
    :after git-commit magit-section with-editor)

  (leaf magit-delta
    :doc "Use Delta when displaying diffs in Magit"
    :req "emacs-25.1" "magit-20200426" "xterm-color-2.0"
    :tag "emacs>=25.1"
    :url "https://github.com/dandavison/magit-delta"
    :added "2021-10-26"
    :emacs>= 25.1
    :straight t
    :after magit xterm-color)

  (leaf magit-gitflow
    :doc "gitflow extension for magit"
    :req "magit-2.1.0" "magit-popup-2.2.0"
    :tag "tools" "vc"
    :url "https://github.com/jtatarik/magit-gitflow"
    :added "2021-10-26"
    :straight t
    :after magit magit-popup)

  (leaf magit-org-todos
    :doc "Add local todo items to the magit status buffer"
    :req "magit-2.0.0" "emacs-24"
    :tag "tools" "magit" "org-mode" "emacs>=24"
    :url "http://github.com/danielma/magit-org-todos"
    :added "2021-10-26"
    :emacs>= 24
    :straight t
    :after magit)

  (leaf magit-popup
    :doc "Define prefix-infix-suffix command combos"
    :req "emacs-24.4" "dash-2.13.0"
    :tag "bindings" "emacs>=24.4"
    :url "https://github.com/magit/magit-popup"
    :added "2021-10-26"
    :emacs>= 24.4
    :straight t)

  (leaf magithub
    :doc "Magit interfaces for GitHub"
    :req "emacs-25" "magit-2.12" "s-1.12.0" "ghub+-0.3" "git-commit-2.12" "markdown-mode-2.3"
    :tag "vc" "tools" "git" "emacs>=25"
    :url "https://github.com/vermiculus/magithub"
    :added "2021-10-26"
    :emacs>= 25
    :straight t
    :after magit ghub+ git-commit markdown-mode)

  (leaf marginalia
    :doc "ミニバッファに付加情報を付ける"
    :straight t
    :global-minor-mode t)

  (leaf markdown-mode
    :straight t
    :disabled nil
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :custom ((markdown-command . "multimarkdown")))

  (leaf meow
    :doc "Yet Another modal editing"
    :req "emacs-27.2"
    :tag "modal-editing" "convenience" "emacs>=27.2"
    :url "https://www.github.com/DogLooksGood/meow"
    :added "2022-01-09"
    :emacs>= 27.2
    :straight t
    :require t
    :disabled t
    :global-minor-mode meow-global-mode
    :config
    (defun meow-setup nil
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       '("j" . "H-j")
       '("k" . "H-k")
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))

    (meow-setup)
    (leaf meow-consult-keymaps
      :config
      (meow-leader-define-key
       '("f" . "C-x f")
       '("i" . "C-x i")
       '("o" . "C-x o"))))

  (leaf mode-icons
    :doc "Show icons for modes"
    :req "emacs-24" "cl-lib-0.5"
    :tag "multimedia" "emacs>=24"
    :url "http://ryuslash.org/projects/mode-icons.html"
    :added "2021-10-26"
    :emacs>= 24
    :straight t
    :defun (mode-icons-mode)
    :config
    (mode-icons-mode))

  (leaf orderless
    :doc "検索キーワードの順番を気にしない"
    :straight t
    :custom ((completion-styles quote
                                (orderless))
             (completion-category-defaults)
             (completion-category-overrides
              '((file
                 (styles partial-completion))))))

  (leaf org
    :disabled nil
    :straight t
    :bind ((:org-mode-map
            ("RET" . electric-newline-and-maybe-indent)))
    :bind (:org-mode-map
           ("C-x i l" . org-insert-link)
           ("C-x i i" . org-insert-checkbox)
           ("C-x i h" . org-insert-heading-below)
           ("C-x i H" . org-insert-heading-respect-content)
           ("C-x i t" . org-insert-todo-heading-below)
           ("C-x i T" . org-insert-todo-heading-respect-content)
           ("C-x c i" . org-clock-in)
           ("C-x c o" . org-clock-out)
           ("C-c a"))
    :blackout (org-mode . "")
    :custom ((org-startup-indented . t)
             (org-src-fontify-natively . t)
             (org-edit-src-content-indentation . 0)
             (org-src-tab-acts-natibely . t)
             (org-src-preserve-indentation . t)
             (org-startup-with-inline-images . t)
             (org-duration-format quote h:mm)
             (org-directory . "~/Documents/org")
             (org-default-notes-file concat org-directory "/notes.org")
             (org-agenda-files quote
                               ("~/Documents/org/todo.org" "~/Documents/org/logbook.org"))
             (org-clock-persistence quote history)
             (org-blank-before-new-entry
              (heading)
              (plain-list-item))
             (org-todo-keywords quote
                                ((sequence "TODO(t)" "FUTURE(f)" "WAIT(w)" "PROGRESS(p)" "|" "DONE(d)" "CANCELLED(c)"))))
    :hook ((org-babel-after-execute-hook . org-redisplay-inline-images))
    :defvar (evil-auto-indent)
    :init
    (defun insert-line-below nil
      "Insert an empty line below the current line."
      (interactive)
      (end-of-line)
      (newline-and-indent))

    (defun insert-line-below-saving-cursor-position nil
      "Insert an empty line below the current line."
      (interactive)
      (save-excursion
        (end-of-line)
        (open-line 1)))

    (defun insert-line-above nil
      "Insert an empty line above the current line."
      (interactive)
      (move-beginning-of-line nil)
      (newline-and-indent)
      (forward-line -1)
      (end-of-line))

    (defun insert-line-above-saving-cursor-position nil
      "Insert an empty line above the current line."
      (interactive)
      (save-excursion
        (end-of-line 0)
        (open-line 1)))

    (defun org-insert-todo-heading-below nil
      (interactive)
      (insert-line-below)
      (org-insert-todo-heading nil))

    (defun org-insert-heading-below nil
      (interactive)
      (insert-line-below)
      (org-insert-heading nil))

    (defun hide-org-todo-keyword nil
      (visual-line-mode 1)
      (setq prettify-symbols-unprettify-at-point 'right-edge)
      (push
       '("[ ]" . "☐")
       prettify-symbols-alist)
      (push
       '("[X]" . "☑")
       prettify-symbols-alist)
      (push
       '("[-]" . "❍")
       prettify-symbols-alist)
      (push
       '("TODO" . "☐")
       prettify-symbols-alist)
      (push
       '("FUTURE" . "✑")
       prettify-symbols-alist)
      (push
       '("WAIT" . "☕")
       prettify-symbols-alist)
      (push
       '("PROGRESS" . "✰")
       prettify-symbols-alist)
      (push
       '("CANCELLED" . "✗")
       prettify-symbols-alist)
      (push
       '("DONE" . "✓")
       prettify-symbols-alist)
      (prettify-symbols-mode 1))

    :config
    (org-clock-persistence-insinuate)
    (defun org-mode-hooks nil
      (setq-local evil-auto-indent nil)
      (hide-org-todo-keyword))

    (add-hook 'org-mode-hook 'org-mode-hooks)
    (blackout 'org-indent-mode))

  (leaf org-bullets
    :straight t
    :disabled t
    :hook org-mode-hook
    :custom ((org-bullets-bullet-list quote
                                      ("" "" "" "" "" "" "" "" ""))))

  (leaf org-preview-html
    :disabled t
    :straight t)

  (leaf org-super-agenda
    :doc "Supercharge your agenda"
    :req "emacs-26.1" "s-1.10.0" "dash-2.13" "org-9.0" "ht-2.2" "ts-0.2"
    :tag "agenda" "org" "outlines" "hypermedia" "emacs>=26.1"
    :url "http://github.com/alphapapa/org-super-agenda"
    :added "2021-10-26"
    :emacs>= 26.1
    :straight t
    :after org ts
    :custom ((org-super-agenda-groups
              '((:name　 "Important" :primary "A")
                (:priority<= "B" :order 1)))))

  (leaf org-superstar
    :straight t
    :require t
    :after org
    :disabled nil
    :hook org-mode-hook)

  (leaf page-break-lines
    :url "https://github.com/purcell/page-break-lines"
    :straight t
    :disabled nil
    :require t
    :defun (turn-on-page-break-lines-mode)
    :custom (turn-on-page-break-lines-mode))

  (leaf paren
    :disabled nil
    :tag "builtin"
    :doc "対応する括弧をハイライト"
    :custom ((show-paren-delay . 0)
             (show-paren-style quote expression))
    :global-minor-mode show-paren-mode
    :config
    (set-face-attribute 'show-paren-match nil :background nil :foreground nil :underline "medium purple" :weight 'regular))

  (leaf plantuml-mode
    :straight t
    :after org
    :custom ((org-plantuml-jar-path . "~/.emacs.d/lib/plantuml.jar")
             (plantuml-jar-path . "~/.emacs.d/lib/plantuml.jar")
             (plantuml-default-exec-mode quote jar))
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((plantuml . t))))

  (leaf pretty-symbols
    :doc "Draw tokens as Unicode glyphs."
    :tag "faces"
    :url "http://github.com/drothlis/pretty-symbols"
    :added "2022-01-11"
    :straight t
    :require t)

  (leaf projectile
    :straight t
    :disabled nil
    :global-minor-mode t
    :blackout t
    :after general
    :custom ((projectile-enable-caching . t))
    :defvar (projectile-globally-ignored-directories)
    :config
    (add-to-list 'projectile-globally-ignored-directories ".git")
    (add-to-list 'projectile-globally-ignored-directories "node_modules"))

  (leaf rainbow-delimiters
    :doc "括弧をカラフルにする"
    :disabled nil
    :straight t
    :require t
    :require cl-lib color
    :hook prog-mode-hook emacs-lisp-mode-hook
    :global-minor-mode t
    :defun (color-saturate-name)
    :defvar (rainbow-delimiters-max-face-count)
    :config
    (defun change-rainbow-delimiters-scheme nil
      (interactive)
      (cl-loop for index from 1 to rainbow-delimiters-max-face-count do
               (let ((face (intern
                            (format "rainbow-delimiters-depth-%d-face" index))))
                 (cl-callf color-saturate-name (face-foreground face)
                   30))))

    (add-hook 'prog-mode-hook 'change-rainbow-delimiters-scheme))

  (leaf recentf
    :doc "最近使ったファイルを参照"
    :tag "builtin"
    :disabled nil
    :custom ((recentf-save-file . "~/.emacs.d/.recentf")
             (recentf-max-saved-items . 200)
             (recentf-exclude quote
                              (".recentf"))
             (recentf-auto-cleanup quote never))
    :global-minor-mode t
    :config
    (run-with-idle-timer 30 t
                         '(lambda nil
                            (with-temp-message (recentf-save-list)))))

  (leaf rust-mode
    :straight t
    :disabled nil
    :custom ((rust-format-on-save . t))
    :config
    (leaf cargo
      :straight t
      :hook (rust-mode . cargo-minor-mode))

    (add-to-list 'exec-path
                 (expand-file-name "~/.local/bin"))
    (add-to-list 'exec-path
                 (expand-file-name "~/.cargo/bin")))

  (leaf savehist
    :doc "コマンド履歴を残す"
    :straight t
    :global-minor-mode t)

  (leaf skk
    :straight ddskk
    :custom ((default-input-method . "japanese-skk"))
    :defun (skk-get)
    :config
    (leaf ddskk-posframe
      :straight t
      :blackout t
      :global-minor-mode t))

  (leaf undo-fu
    :doc "simple undo/redo"
    :straight t
    :disabled nil
    :custom ((evil-undo-system quote undo-fu))
    :config
    )

  (leaf valign
    :doc "Visually align tables"
    :req "emacs-26.0"
    :tag "table" "text" "convenience" "emacs>=26.0"
    :url "https://github.com/casouri/valign"
    :added "2022-01-01"
    :emacs>= 26.0
    :straight t
    :hook org-mode-hook)

  (leaf vertico
    :doc "completion framework"
    :straight t
    :disabled nil
    :global-minor-mode t
    :config
    )

  (leaf which-key
    :ensure t
    :blackout t
    :custom ((which-key-idle-delay . 0))
    :global-minor-mode t))



(provide 'init)

;; Local Variables:
;; indent-tabs-mode: nil
;; buffer-read-only: t
;; End:

;;; init.el ends here
