Time	Sum	Command
7	3756	> __fish_on_interactive
83	3744	-> __fish_config_interactive
445	449	--> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/__fish_config_interactive.fish
4	4	---> function __fish_config_interactive -d "Initializations that should be performed when entering interactive mode"...
1	8	--> if test $__fish_initialized -lt 3000...
7	7	---> test $__fish_initialized -lt 3000
1	4	--> if set -q __fish_config_interactive_done...
3	3	---> set -q __fish_config_interactive_done
3	3	--> set -g __fish_config_interactive_done
3	3	--> set -g __fish_active_key_bindings
3	3	--> function __init_uvar -d "Sets a universal variable if it's not already set"...
0	3	--> if test $__fish_initialized -lt 3100...
3	3	---> test $__fish_initialized -lt 3100
5	27	--> if not set -q FISH_UNIT_TESTS_RUNNING...
2	2	---> not set -q FISH_UNIT_TESTS_RUNNING
6	6	---> set -l script $__fish_data_dir/tools/create_manpage_completions.py
1	14	---> if not test -d $__fish_user_data_dir/generated_completions...
13	13	----> not test -d $__fish_user_data_dir/generated_completions
4	232	--> if status --is-interactive...
3	3	---> status --is-interactive
56	210	---> functions -q fish_greeting
152	154	----> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_greeting.fish
2	2	-----> function fish_greeting...
7	15	---> fish_greeting
0	3	----> if not set -q fish_greeting...
3	3	-----> not set -q fish_greeting
0	2	----> if set -q fish_private_mode...
2	2	-----> set -q fish_private_mode
3	3	----> test -n "$fish_greeting"
0	8	--> if test -d /etc/init.d...
8	8	---> test -d /etc/init.d
5	5	--> complete -c [ --wraps test
3	3	--> complete -c ! --wraps not
75	147	--> complete -c(builtin -n | string match -rv '(\.|:|source|cd|contains|count|echo|exec|printf|random|realpath|set|\\[|test|for)') --no-files
72	72	---> builtin -n | string match -rv '(\.|:|source|cd|contains|count|echo|exec|printf|random|realpath|set|\\[|test|for)'
4	4	--> function __fish_reload_key_bindings -d "Reload key bindings when binding variable change" --on-variable fish_key_bindings...
10	2588	--> __fish_reload_key_bindings
9	14	---> __init_uvar fish_key_bindings fish_default_key_bindings
0	5	----> if not set --query $argv[1]...
5	5	-----> not set --query $argv[1]
1	9	---> if test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"...
8	8	----> test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"
1	311	---> if not functions -q "$fish_key_bindings"...
55	310	----> not functions -q "$fish_key_bindings"
252	255	-----> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_default_key_bindings.fish
3	3	------> function fish_default_key_bindings -d "Default (Emacs-like) key bindings for fish"...
6	6	---> set -g __fish_active_key_bindings "$fish_key_bindings"
3	3	---> set -g fish_bind_mode default
3	1329	---> if test "$fish_key_bindings" = fish_default_key_bindings...
4	4	----> test "$fish_key_bindings" = fish_default_key_bindings
109	1322	----> fish_default_key_bindings 2>/dev/null
1	9	-----> if contains -- -h $argv...
5	5	------> contains -- -h $argv
3	3	------> contains -- --help $argv
3	15	-----> if not set -q argv[1]...
2	2	------> not set -q argv[1]
6	6	------> bind --erase --all --preset
0	4	------> if test "$fish_key_bindings" != fish_default_key_bindings...
4	4	-------> test "$fish_key_bindings" != fish_default_key_bindings
2	8	-----> if not contains -- -s $argv...
3	3	------> not contains -- -s $argv
3	3	------> set argv -s $argv
102	979	-----> __fish_shared_key_bindings $argv
344	352	------> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/__fish_shared_key_bindings.fish
3	3	-------> function __fish_shared_key_bindings -d "Bindings shared between emacs and vi mode"...
3	3	-------> function __fish_commandline_insert_escaped --description 'Insert the first arg escaped if a second arg is given'...
1	1	-------> function __fish_start_bracketed_paste...
1	1	-------> function __fish_stop_bracketed_paste...
0	8	------> if contains -- -h $argv...
4	4	-------> contains -- -h $argv
4	4	-------> contains -- --help $argv
4	4	------> bind --preset $argv \cy yank
4	4	------> bind --preset $argv \ey yank-pop
5	5	------> bind --preset $argv -k right forward-char
4	4	------> bind --preset $argv -k left backward-char
4	4	------> bind --preset $argv \e\[C forward-char
3	3	------> bind --preset $argv \e\[D backward-char
3	3	------> bind --preset $argv \eOC forward-char
3	3	------> bind --preset $argv \eOD backward-char
3	3	------> bind --preset $argv \e\[1\;5C forward-word
4	4	------> bind --preset $argv \e\[1\;5D backward-word
4	4	------> bind --preset $argv -k ppage beginning-of-history
4	4	------> bind --preset $argv -k npage end-of-history
4	4	------> bind --preset $argv \cx fish_clipboard_copy
4	4	------> bind --preset $argv \cv fish_clipboard_paste
4	4	------> bind --preset $argv \e cancel
4	4	------> bind --preset $argv \t complete
3	3	------> bind --preset $argv \cs pager-toggle-search
4	4	------> bind --preset $argv --key btab complete-and-search
4	4	------> bind --preset $argv \e\n "commandline -f expand-abbr; commandline -i \n"
4	4	------> bind --preset $argv \e\r "commandline -f expand-abbr; commandline -i \n"
4	4	------> bind --preset $argv -k down down-or-search
5	5	------> bind --preset $argv -k up up-or-search
4	4	------> bind --preset $argv \e\[A up-or-search
4	4	------> bind --preset $argv \e\[B down-or-search
3	3	------> bind --preset $argv \eOA up-or-search
4	4	------> bind --preset $argv \eOB down-or-search
5	5	------> bind --preset $argv -k sright forward-bigword
5	5	------> bind --preset $argv -k sleft backward-bigword
4	4	------> bind --preset $argv \e\eOC nextd-or-forward-word
4	4	------> bind --preset $argv \e\eOD prevd-or-backward-word
4	4	------> bind --preset $argv \e\e\[C nextd-or-forward-word
3	3	------> bind --preset $argv \e\e\[D prevd-or-backward-word
4	4	------> bind --preset $argv \eO3C nextd-or-forward-word
3	3	------> bind --preset $argv \eO3D prevd-or-backward-word
3	3	------> bind --preset $argv \e\[3C nextd-or-forward-word
3	3	------> bind --preset $argv \e\[3D prevd-or-backward-word
4	4	------> bind --preset $argv \e\[1\;3C nextd-or-forward-word
4	4	------> bind --preset $argv \e\[1\;3D prevd-or-backward-word
4	4	------> bind --preset $argv \e\[1\;9C nextd-or-forward-word
4	4	------> bind --preset $argv \e\[1\;9D prevd-or-backward-word
4	4	------> bind --preset $argv \e\eOA history-token-search-backward
4	4	------> bind --preset $argv \e\eOB history-token-search-forward
4	4	------> bind --preset $argv \e\e\[A history-token-search-backward
4	4	------> bind --preset $argv \e\e\[B history-token-search-forward
3	3	------> bind --preset $argv \eO3A history-token-search-backward
3	3	------> bind --preset $argv \eO3B history-token-search-forward
4	4	------> bind --preset $argv \e\[3A history-token-search-backward
4	4	------> bind --preset $argv \e\[3B history-token-search-forward
4	4	------> bind --preset $argv \e\[1\;3A history-token-search-backward
3	3	------> bind --preset $argv \e\[1\;3B history-token-search-forward
4	4	------> bind --preset $argv \e\[1\;9A history-token-search-backward
4	4	------> bind --preset $argv \e\[1\;9B history-token-search-forward
3	3	------> bind --preset $argv \e. history-token-search-backward
3	3	------> bind --preset $argv \el __fish_list_current_token
3	3	------> bind --preset $argv \eo __fish_preview_current_file
3	3	------> bind --preset $argv \ew __fish_whatis_current_token
5	5	------> bind --preset $argv \cl 'echo -n (clear | string replace \e\[3J ""); commandline -f repaint'
3	3	------> bind --preset $argv \cc cancel-commandline
3	3	------> bind --preset $argv \cu backward-kill-line
3	3	------> bind --preset $argv \cw backward-kill-path-component
4	4	------> bind --preset $argv \e\[F end-of-line
3	3	------> bind --preset $argv \e\[H beginning-of-line
5	5	------> bind --preset $argv \ed 'set -l cmd (commandline); if test -z "$cmd"; echo; dirh; commandline -f repaint; else; commandline -f kill-word; end'
3	3	------> bind --preset $argv \cd delete-or-exit
4	4	------> bind --preset $argv \es "fish_commandline_prepend sudo"
4	4	------> bind --preset $argv -k f1 __fish_man_page
4	4	------> bind --preset $argv \eh __fish_man_page
8	8	------> bind --preset $argv \ep __fish_paginate
5	5	------> bind --preset $argv \e\# __fish_toggle_comment_commandline
4	4	------> bind --preset $argv \ee edit_command_buffer
3	3	------> bind --preset $argv \ev edit_command_buffer
49	118	------> for mode in (bind --list-modes | string match -v paste)...
41	41	-------> bind --list-modes | string match -v paste
6	6	-------> bind --preset -M $mode \e\[I 'emit fish_focus_in'
4	4	-------> bind --preset -M $mode \e\[O false
5	5	-------> bind --preset -M $mode \e\[\?1004h false
5	5	-------> bind --preset -M $mode \e\[I 'emit fish_focus_in'
4	4	-------> bind --preset -M $mode \e\[O false
4	4	-------> bind --preset -M $mode \e\[\?1004h false
48	102	------> for mode in (bind --list-modes | string match -v paste)...
35	35	-------> bind --list-modes | string match -v paste
12	12	-------> bind --preset -M $mode -m paste \e\[200~ __fish_start_bracketed_paste
7	7	-------> bind --preset -M $mode -m paste \e\[200~ __fish_start_bracketed_paste
5	5	------> bind --preset -M paste \e\[201~ __fish_stop_bracketed_paste
4	4	------> bind --preset -M paste "" self-insert
4	4	------> bind --preset -M paste \r "commandline -i \n"
5	5	------> bind --preset -M paste "'" "__fish_commandline_insert_escaped \' \$__fish_paste_quoted"
4	4	------> bind --preset -M paste \\ "__fish_commandline_insert_escaped \\\ \$__fish_paste_quoted"
3	3	------> bind --preset -M paste " " self-insert-notfirst
4	4	-----> bind --preset $argv "" self-insert
4	4	-----> bind --preset $argv " " self-insert expand-abbr
4	4	-----> bind --preset $argv ";" self-insert expand-abbr
4	4	-----> bind --preset $argv "|" self-insert expand-abbr
4	4	-----> bind --preset $argv "&" self-insert expand-abbr
4	4	-----> bind --preset $argv "^" self-insert expand-abbr
4	4	-----> bind --preset $argv ">" self-insert expand-abbr
4	4	-----> bind --preset $argv "<" self-insert expand-abbr
4	4	-----> bind --preset $argv ")" self-insert expand-abbr
6	6	-----> bind --preset $argv -k nul 'commandline -i " "'
4	4	-----> bind --preset $argv \n execute
3	3	-----> bind --preset $argv \r execute
3	3	-----> bind --preset $argv \ck kill-line
3	3	-----> bind --preset $argv \eOC forward-char
3	3	-----> bind --preset $argv \eOD backward-char
3	3	-----> bind --preset $argv \e\[C forward-char
3	3	-----> bind --preset $argv \e\[D backward-char
4	4	-----> bind --preset $argv -k right forward-char
3	3	-----> bind --preset $argv -k left backward-char
4	4	-----> bind --preset $argv -k dc delete-char
4	4	-----> bind --preset $argv -k backspace backward-delete-char
3	3	-----> bind --preset $argv \x7f backward-delete-char
4	4	-----> bind --preset $argv \e\[1~ beginning-of-line
3	3	-----> bind --preset $argv \e\[3~ delete-char
4	4	-----> bind --preset $argv \e\[4~ end-of-line
4	4	-----> bind --preset $argv -k home beginning-of-line
4	4	-----> bind --preset $argv -k end end-of-line
5	5	-----> bind --preset $argv \e\[3\;2~ backward-delete-char
4	4	-----> bind --preset $argv \ca beginning-of-line
4	4	-----> bind --preset $argv \ce end-of-line
3	3	-----> bind --preset $argv \ch backward-delete-char
4	4	-----> bind --preset $argv \cp up-or-search
4	4	-----> bind --preset $argv \cn down-or-search
4	4	-----> bind --preset $argv \cf forward-char
4	4	-----> bind --preset $argv \cb backward-char
4	4	-----> bind --preset $argv \ct transpose-chars
4	4	-----> bind --preset $argv \c_ undo
4	4	-----> bind --preset $argv \cz undo
3	3	-----> bind --preset $argv \e/ redo
3	3	-----> bind --preset $argv \et transpose-words
4	4	-----> bind --preset $argv \eu upcase-word
4	4	-----> bind --preset $argv \ec capitalize-word
4	4	-----> bind --preset $argv \e\x7f backward-kill-word
4	4	-----> bind --preset $argv \e\b backward-kill-word
4	4	-----> bind --preset $argv \eb backward-word
3	3	-----> bind --preset $argv \ef forward-word
3	3	-----> bind --preset $argv \e\< beginning-of-buffer
4	4	-----> bind --preset $argv \e\> end-of-buffer
4	4	-----> bind --preset $argv \ed kill-word
5	5	-----> bind --preset $argv \cr 'commandline | string length -q; and commandline -f history-search-backward'
8	12	-----> switch "$TERM"...
4	4	------> bind --preset $argv \e\x20ep fish_clipboard_paste
3	906	---> if functions --query fish_user_key_bindings >/dev/null...
129	247	----> functions --query fish_user_key_bindings >/dev/null
117	118	-----> source /Users/solenoid/.config/fish/functions/fish_user_key_bindings.fish
1	1	------> function fish_user_key_bindings...
75	656	----> fish_user_key_bindings 2>/dev/null
58	581	-----> fzf_key_bindings
342	343	------> source /Users/solenoid/.config/fish/functions/fzf_key_bindings.fish
1	1	-------> function fzf_key_bindings...
2	2	------> function fzf-file-widget -d "List files and folders"...
2	2	------> function fzf-history-widget -d "Show command history"...
2	2	------> function fzf-cd-widget -d "Change directory"...
1	1	------> function __fzfcmd...
3	3	------> bind \ct fzf-file-widget
3	3	------> bind \cr fzf-history-widget
3	3	------> bind \ec fzf-cd-widget
6	158	------> if bind -M insert > /dev/null 2>&1...
140	140	-------> bind -M insert > /dev/null 2>&1
5	5	-------> bind -M insert \ct fzf-file-widget
4	4	-------> bind -M insert \cr fzf-history-widget
3	3	-------> bind -M insert \ec fzf-cd-widget
4	4	------> function __fzf_parse_commandline -d 'Parse the current command line token and return split of existing filepath, fzf query, and optional -option= prefix'...
2	2	------> function __fzf_get_dir -d 'Find the longest existing filepath from input string'...
3	31	--> if not set -q FISH_UNIT_TESTS_RUNNING...
3	3	---> not set -q FISH_UNIT_TESTS_RUNNING
3	3	---> function __fish_enable_bracketed_paste --on-event fish_prompt --on-event fish_read...
2	2	---> function __fish_disable_bracketed_paste --on-event fish_preexec --on-event fish_exit...
6	20	---> __fish_enable_bracketed_paste
14	14	----> printf "\e[?2004h"
0	3	--> if set -q TMUX...
3	3	---> set -q TMUX
2	24	--> if not set -q fish_handle_reflow...
2	2	---> not set -q fish_handle_reflow
5	20	---> if set -q VTE_VERSION...
2	2	----> set -q VTE_VERSION
5	5	----> string match -q -- 'alacritty*' $TERM
4	4	----> string match -q -- '*kitty' $TERM
1	1	----> set -q KONSOLE_VERSION
3	3	----> set -g fish_handle_reflow 1
4	4	--> function __fish_winch_handler --on-signal WINCH -d "Repaint screen when window changes size"...
2	66	--> if not set -q FISH_UNIT_TESTS_RUNNING...
1	1	---> not set -q FISH_UNIT_TESTS_RUNNING
48	63	---> test 0"$VTE_VERSION" -ge 3405 -o "$TERM_PROGRAM" = Apple_Terminal -a (string match -r '\d+' 0"$TERM_PROGRAM_VERSION") -ge 309 -o "$TERM_PROGRAM" = WezTerm -o "$TERM" = foot
15	15	----> string match -r '\d+' 0"$TERM_PROGRAM_VERSION"
28	28	--> test -e $__fish_config_dir/completions/ -a -e $__fish_config_dir/conf.d/ -a -e $__fish_config_dir/functions/
10	10	--> test -e $__fish_config_dir/config.fish
8	8	--> set __fish_initialized 3100
5	5	-> functions -e __fish_on_interactive
111	113	> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_mode_prompt.fish
2	2	-> function fish_mode_prompt --description "Displays the current mode"...
7	213	> fish_mode_prompt
57	206	-> fish_default_mode_prompt
136	139	--> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_default_mode_prompt.fish
3	3	---> function fish_default_mode_prompt --description "Display the default mode for the prompt"...
0	10	--> if test "$fish_key_bindings" = fish_vi_key_bindings...
6	6	---> test "$fish_key_bindings" = fish_vi_key_bindings
4	4	---> test "$fish_key_bindings" = fish_hybrid_key_bindings
166	168	> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_prompt.fish
2	2	-> function fish_prompt --description 'Write out the prompt'...
19	46368	> fish_prompt
6	6	-> set -l last_pipestatus $pipestatus
4	4	-> set -lx __fish_last_status $status
21	46	-> set -l normal (set_color normal)
25	25	--> set_color normal
3	3	-> set -q fish_color_status
4	4	-> set -l color_cwd $fish_color_cwd
3	3	-> set -l suffix '>'
1	173	-> if functions -q fish_is_root_user...
42	151	--> functions -q fish_is_root_user
106	109	---> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_is_root_user.fish
3	3	----> function fish_is_root_user --description "Check if the user is root"...
8	21	--> fish_is_root_user
0	11	---> if contains -- $USER root toor Administrator...
11	11	----> contains -- $USER root toor Administrator
2	2	---> return 1
3	3	-> set -l bold_flag --bold
3	3	-> set -q __fish_prompt_status_generation
4	4	-> set -g __fish_prompt_status_generation $status_generation
2	8	-> if test $__fish_prompt_status_generation = $status_generation...
4	4	--> test $__fish_prompt_status_generation = $status_generation
2	2	--> set bold_flag
4	4	-> set __fish_prompt_status_generation $status_generation
21	30	-> set -l status_color (set_color $fish_color_status)
9	9	--> set_color $fish_color_status
26	32	-> set -l statusb_color (set_color $bold_flag $fish_color_status)
6	6	--> set_color $bold_flag $fish_color_status
25	298	-> set -l prompt_status (__fish_print_pipestatus "[" "]" "|" "$status_color" "$statusb_color" $last_pipestatus)
70	273	--> __fish_print_pipestatus "[" "]" "|" "$status_color" "$statusb_color" $last_pipestatus
162	165	---> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/__fish_print_pipestatus.fish
3	3	----> function __fish_print_pipestatus --description "Print pipestatus for prompt"...
3	3	---> set -l last_status
2	8	---> if set -q __fish_last_status...
2	2	----> set -q __fish_last_status
4	4	----> set last_status $__fish_last_status
4	4	---> set -l left_brace $argv[1]
3	3	---> set -l right_brace $argv[2]
3	3	---> set -l separator $argv[3]
3	3	---> set -l brace_sep_color $argv[4]
3	3	---> set -l status_color $argv[5]
4	4	---> set -e argv[1 2 3 4 5]
1	3	---> if not set -q argv[1]...
2	2	----> not set -q argv[1]
0	4	---> if not contains $last_status 0 141...
4	4	----> not contains $last_status 0 141
75	45728	-> echo -n -s (prompt_login)' ' (set_color $color_cwd) (prompt_pwd) $normal (fish_vcs_prompt) $normal " "$prompt_status $suffix " "
50	518	--> prompt_login
169	172	---> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/prompt_login.fish
3	3	----> function prompt_login --description "Print a description of the user and host suitable for the prompt"...
5	23	---> if not set -q __fish_machine...
2	2	----> not set -q __fish_machine
2	2	----> set -g __fish_machine
3	3	----> set -l debian_chroot $debian_chroot
1	8	----> if  test -r /etc/debian_chroot...
7	7	-----> test -r /etc/debian_chroot
1	3	----> if set -q debian_chroot[1]...
2	2	-----> set -q debian_chroot[1]
1	3	---> if set -q __fish_machine[1]...
2	2	----> set -q __fish_machine[1]
4	4	---> set -l color_host $fish_color_host
0	2	---> if set -q SSH_TTY...
2	2	----> set -q SSH_TTY
85	264	---> echo -n -s (set_color $fish_color_user) "$USER" (set_color normal) @ (set_color $color_host) (prompt_hostname) (set_color normal)
7	7	----> set_color $fish_color_user
7	7	----> set_color normal
6	6	----> set_color $color_host
42	155	----> prompt_hostname
103	104	-----> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/prompt_hostname.fish
1	1	------> function prompt_hostname...
9	9	-----> string replace -r "\..*" "" $hostname
4	4	----> set_color normal
6	6	--> set_color $color_cwd
45	242	--> prompt_pwd
129	132	---> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/prompt_pwd.fish
3	3	----> function prompt_pwd --description "Print the current working directory, shortened to fit the prompt"...
3	3	---> set -l options h/help
7	7	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
0	2	---> if set -q _flag_help...
2	2	----> set -q _flag_help
2	2	---> set -q fish_prompt_pwd_dir_length
3	3	---> set -l fish_prompt_pwd_dir_length 1
4	4	---> set -l realhome ~
17	28	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
11	11	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
2	16	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
4	4	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
10	10	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
39	44887	--> fish_vcs_prompt
98	101	---> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_vcs_prompt.fish
3	3	----> function fish_vcs_prompt --description "Print the prompts for all available vcsen"...
66	44747	---> fish_git_prompt $argv
1078	1373	----> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_git_prompt.fish
3	3	-----> function __fish_git_prompt_show_upstream --description "Helper function for fish_git_prompt"...
2	2	-----> function fish_git_prompt --description "Prompt function for Git"...
3	3	-----> function __fish_git_prompt_staged --description "fish_git_prompt helper, tells whether or not the current branch has staged files"...
3	3	-----> function __fish_git_prompt_untracked --description "fish_git_prompt helper, tells whether or not the current repository has untracked files"...
3	3	-----> function __fish_git_prompt_dirty --description "fish_git_prompt helper, tells whether or not the current branch has tracked, modified files"...
1	1	-----> function __fish_git_prompt_informative_status...
3	3	-----> function __fish_git_prompt_operation_branch_bare --description "fish_git_prompt helper, returns the current Git operation and branch"...
1	1	-----> function __fish_git_prompt_set_char...
2	2	-----> function __fish_git_prompt_validate_chars --description "fish_git_prompt helper, checks char variables"...
1	1	-----> function __fish_git_prompt_set_color...
2	2	-----> function __fish_git_prompt_validate_colors --description "fish_git_prompt helper, checks color variables"...
4	4	-----> set -l varargs
31	64	-----> for var in repaint describe_style show_informative_status use_informative_chars showdirtystate showstashstate showuntrackedfiles showupstream...
5	5	------> set -a varargs --on-variable __fish_git_prompt_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_$var
13	13	-----> function __fish_git_prompt_reset $varargs --description "Event handler, resets prompt when functionality changes"...
3	3	-----> set -l varargs
20	83	-----> for var in '' _prefix _suffix _bare _merging _cleanstate _invalidstate _upstream _flags _branch _dirtystate _stagedstate _branch_detached _stashstate _untrackedfiles...
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
3	3	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
5	5	------> set -a varargs --on-variable __fish_git_prompt_color$var
5	5	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
5	5	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_color$var
5	5	------> set -a varargs --on-variable __fish_git_prompt_color$var
4	4	-----> set -a varargs --on-variable __fish_git_prompt_showcolorhints
19	19	-----> function __fish_git_prompt_reset_color $varargs --description "Event handler, resets prompt when any color changes"...
3	3	-----> set -l varargs
16	65	-----> for var in cleanstate dirtystate invalidstate stagedstate stashstate stateseparator untrackedfiles upstream_ahead upstream_behind upstream_diverged upstream_equal upstream_prefix...
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
3	3	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
5	5	------> set -a varargs --on-variable __fish_git_prompt_char_$var
4	4	------> set -a varargs --on-variable __fish_git_prompt_char_$var
5	5	------> set -a varargs --on-variable __fish_git_prompt_char_$var
13	13	-----> function __fish_git_prompt_reset_char $varargs --description "Event handler, resets prompt when any char changes"...
2	55	----> if not command -sq git...
53	53	-----> not command -sq git
45	8861	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD 2>/dev/null)
8816	8816	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD 2>/dev/null
7	7	----> test -n "$repo_info"
5	5	----> set -l git_dir $repo_info[1]
4	4	----> set -l inside_gitdir $repo_info[2]
4	4	----> set -l bare_repo $repo_info[3]
4	4	----> set -l inside_worktree $repo_info[4]
2	2	----> set -q repo_info[5]
4	4	----> set -l sha $repo_info[5]
27	8402	----> set -l rbc (__fish_git_prompt_operation_branch_bare $repo_info)
21	8375	-----> __fish_git_prompt_operation_branch_bare $repo_info
4	4	------> set -l git_dir $argv[1]
4	4	------> set -l inside_gitdir $argv[2]
4	4	------> set -l bare_repo $argv[3]
2	2	------> set -q argv[5]
3	3	------> set -l sha $argv[5]
3	3	------> set -l branch
2	2	------> set -l operation
2	2	------> set -l detached no
2	2	------> set -l bare
2	2	------> set -l step
3	3	------> set -l total
17	53	------> if test -d $git_dir/rebase-merge...
7	7	-------> test -d $git_dir/rebase-merge
3	29	-------> if test -d $git_dir/rebase-apply...
6	6	--------> test -d $git_dir/rebase-apply
5	5	--------> test -f $git_dir/MERGE_HEAD
5	5	--------> test -f $git_dir/CHERRY_PICK_HEAD
5	5	--------> test -f $git_dir/REVERT_HEAD
5	5	--------> test -f $git_dir/BISECT_LOG
0	5	------> if test -n "$step" -a -n "$total"...
5	5	-------> test -n "$step" -a -n "$total"
6	8243	------> if test -z "$branch"...
2	2	-------> test -z "$branch"
1	8235	-------> if not set branch (command git symbolic-ref HEAD 2>/dev/null)...
39	8234	--------> not set branch (command git symbolic-ref HEAD 2>/dev/null)
8195	8195	---------> command git symbolic-ref HEAD 2>/dev/null
1	6	------> if test true = $inside_gitdir...
5	5	-------> test true = $inside_gitdir
6	6	------> echo $operation
4	4	------> echo $branch
3	3	------> echo $detached
3	3	------> echo $bare
4	4	----> set -l r $rbc[1]
4	4	----> set -l b $rbc[2]
4	4	----> set -l detached $rbc[3]
3	3	----> set -l dirtystate
3	3	----> set -l stagedstate
3	3	----> set -l invalidstate
3	3	----> set -l stashstate
3	3	----> set -l untrackedfiles
3	3	----> set -l c $rbc[4]
2	2	----> set -l p
3	3	----> set -l informative_status
2	2	----> set -q __fish_git_prompt_status_order
5	5	----> set -g __fish_git_prompt_status_order stagedstate invalidstate dirtystate untrackedfiles stashstate
4	2423	----> if not set -q ___fish_git_prompt_init...
2	2	-----> not set -q ___fish_git_prompt_init
12	1007	-----> __fish_git_prompt_validate_chars
27	100	------> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate '✔'
5	5	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
1	3	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
19	54	-------> if not set -q $variable...
2	2	--------> not set -q $variable
27	33	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
10	90	------> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate '*' '✚'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
2	25	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
17	21	--------> begin...
2	2	---------> set -q __fish_git_prompt_show_informative_status
2	2	---------> set -q __fish_git_prompt_use_informative_chars
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	40	-------> if not set -q $variable...
2	2	--------> not set -q $variable
29	35	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
11	96	------> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate '#' '✖'
5	5	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
0	26	-------> if set -q argv[3]...
3	3	--------> set -q argv[3]
19	23	--------> begin...
2	2	---------> set -q __fish_git_prompt_show_informative_status
2	2	---------> set -q __fish_git_prompt_use_informative_chars
4	4	-------> set -l variable _$user_variable_name
5	5	-------> set -l variable_done "$variable"_done
4	42	-------> if not set -q $variable...
3	3	--------> not set -q $variable
28	35	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
4	4	---------> echo $char
10	81	------> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate '+' '●'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
1	24	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
18	21	--------> begin...
2	2	---------> set -q __fish_git_prompt_show_informative_status
1	1	---------> set -q __fish_git_prompt_use_informative_chars
3	3	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
2	33	-------> if not set -q $variable...
3	3	--------> not set -q $variable
21	28	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
4	4	---------> set -q $user_variable_name
3	3	---------> echo $char
7	85	------> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate '$' '⚑'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
1	24	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
17	21	--------> begin...
2	2	---------> set -q __fish_git_prompt_show_informative_status
2	2	---------> set -q __fish_git_prompt_use_informative_chars
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	39	-------> if not set -q $variable...
2	2	--------> not set -q $variable
28	34	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
10	82	------> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator ' ' '|'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
0	24	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
18	22	--------> begin...
2	2	---------> set -q __fish_git_prompt_show_informative_status
2	2	---------> set -q __fish_git_prompt_use_informative_chars
4	4	-------> set -l variable _$user_variable_name
3	3	-------> set -l variable_done "$variable"_done
2	34	-------> if not set -q $variable...
2	2	--------> not set -q $variable
25	30	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
2	2	---------> echo $char
8	82	------> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles '%' '…'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
2	24	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
17	20	--------> begin...
1	1	---------> set -q __fish_git_prompt_show_informative_status
2	2	---------> set -q __fish_git_prompt_use_informative_chars
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
2	35	-------> if not set -q $variable...
3	3	--------> not set -q $variable
23	30	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
4	4	---------> set -q $user_variable_name
3	3	---------> echo $char
10	78	------> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead '>' '↑'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
1	24	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
17	21	--------> begin...
2	2	---------> set -q __fish_git_prompt_show_informative_status
2	2	---------> set -q __fish_git_prompt_use_informative_chars
3	3	-------> set -l variable _$user_variable_name
3	3	-------> set -l variable_done "$variable"_done
3	31	-------> if not set -q $variable...
2	2	--------> not set -q $variable
20	26	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
7	78	------> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind '<' '↓'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
2	24	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
17	20	--------> begin...
1	1	---------> set -q __fish_git_prompt_show_informative_status
2	2	---------> set -q __fish_git_prompt_use_informative_chars
3	3	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	33	-------> if not set -q $variable...
2	2	--------> not set -q $variable
22	28	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
6	77	------> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
2	3	-------> if set -q argv[3]...
1	1	--------> set -q argv[3]
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
18	53	-------> if not set -q $variable...
3	3	--------> not set -q $variable
26	32	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
7	73	------> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal '='
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l char $argv[2]
1	2	-------> if set -q argv[3]...
1	1	--------> set -q argv[3]
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
18	49	-------> if not set -q $variable...
3	3	--------> not set -q $variable
22	28	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
9	73	------> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix ''
4	4	-------> set -l user_variable_name "$argv[1]"
4	4	-------> set -l char $argv[2]
0	2	-------> if set -q argv[3]...
2	2	--------> set -q argv[3]
3	3	-------> set -l variable _$user_variable_name
3	3	-------> set -l variable_done "$variable"_done
18	48	-------> if not set -q $variable...
2	2	--------> not set -q $variable
22	28	--------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
3	3	---------> set -q $user_variable_name
3	3	---------> echo $char
13	1407	-----> __fish_git_prompt_validate_colors
28	116	------> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
4	4	-------> set -l user_variable_name "$argv[1]"
2	2	-------> set -l default default_done
36	52	-------> switch (count $argv)...
7	7	--------> count $argv
5	5	--------> set default "$argv[2]"
4	4	--------> set default_done "$argv[3]"
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	22	-------> if not set -q $variable...
3	3	--------> not set -q $variable
1	16	--------> if test -n "$$user_variable_name"...
5	5	---------> test -n "$$user_variable_name"
5	5	---------> set -g $variable $default
5	5	---------> set -g $variable_done $default_done
9	88	------> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
4	4	-------> set -l user_variable_name "$argv[1]"
2	2	-------> set -l default default_done
32	45	-------> switch (count $argv)...
5	5	--------> count $argv
4	4	--------> set default $___fish_git_prompt_color
4	4	--------> set default_done $___fish_git_prompt_color_done
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	20	-------> if not set -q $variable...
2	2	--------> not set -q $variable
2	15	--------> if test -n "$$user_variable_name"...
4	4	---------> test -n "$$user_variable_name"
4	4	---------> set -g $variable $default
5	5	---------> set -g $variable_done $default_done
9	87	------> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
3	3	-------> set -l user_variable_name "$argv[1]"
2	2	-------> set -l default default_done
33	45	-------> switch (count $argv)...
4	4	--------> count $argv
4	4	--------> set default $___fish_git_prompt_color
4	4	--------> set default_done $___fish_git_prompt_color_done
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	20	-------> if not set -q $variable...
3	3	--------> not set -q $variable
1	14	--------> if test -n "$$user_variable_name"...
3	3	---------> test -n "$$user_variable_name"
5	5	---------> set -g $variable $default
5	5	---------> set -g $variable_done $default_done
6	89	------> __fish_git_prompt_set_color __fish_git_prompt_color_bare
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l default default_done
38	48	-------> switch (count $argv)...
3	3	--------> count $argv
4	4	--------> set default $___fish_git_prompt_color
3	3	--------> set default_done $___fish_git_prompt_color_done
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
2	20	-------> if not set -q $variable...
2	2	--------> not set -q $variable
3	16	--------> if test -n "$$user_variable_name"...
3	3	---------> test -n "$$user_variable_name"
6	6	---------> set -g $variable $default
4	4	---------> set -g $variable_done $default_done
9	85	------> __fish_git_prompt_set_color __fish_git_prompt_color_merging
3	3	-------> set -l user_variable_name "$argv[1]"
2	2	-------> set -l default default_done
34	44	-------> switch (count $argv)...
3	3	--------> count $argv
3	3	--------> set default $___fish_git_prompt_color
4	4	--------> set default_done $___fish_git_prompt_color_done
3	3	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
2	20	-------> if not set -q $variable...
3	3	--------> not set -q $variable
3	15	--------> if test -n "$$user_variable_name"...
3	3	---------> test -n "$$user_variable_name"
5	5	---------> set -g $variable $default
4	4	---------> set -g $variable_done $default_done
11	84	------> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
3	3	-------> set -l user_variable_name "$argv[1]"
2	2	-------> set -l default default_done
33	43	-------> switch (count $argv)...
4	4	--------> count $argv
3	3	--------> set default $___fish_git_prompt_color
3	3	--------> set default_done $___fish_git_prompt_color_done
3	3	-------> set -l variable _$user_variable_name
3	3	-------> set -l variable_done "$variable"_done
1	19	-------> if not set -q $variable...
3	3	--------> not set -q $variable
3	15	--------> if test -n "$$user_variable_name"...
3	3	---------> test -n "$$user_variable_name"
5	5	---------> set -g $variable $default
4	4	---------> set -g $variable_done $default_done
7	88	------> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l default default_done
31	43	-------> switch (count $argv)...
4	4	--------> count $argv
4	4	--------> set default $___fish_git_prompt_color
4	4	--------> set default_done $___fish_git_prompt_color_done
3	3	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
2	24	-------> if not set -q $variable...
3	3	--------> not set -q $variable
2	19	--------> if test -n "$$user_variable_name"...
8	8	---------> test -n "$$user_variable_name"
5	5	---------> set -g $variable $default
4	4	---------> set -g $variable_done $default_done
7	83	------> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
4	4	-------> set -l user_variable_name "$argv[1]"
2	2	-------> set -l default default_done
31	43	-------> switch (count $argv)...
4	4	--------> count $argv
4	4	--------> set default $___fish_git_prompt_color
4	4	--------> set default_done $___fish_git_prompt_color_done
3	3	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	20	-------> if not set -q $variable...
3	3	--------> not set -q $variable
3	14	--------> if test -n "$$user_variable_name"...
3	3	---------> test -n "$$user_variable_name"
4	4	---------> set -g $variable $default
4	4	---------> set -g $variable_done $default_done
4	351	------> if set -q __fish_git_prompt_showcolorhints...
2	2	-------> set -q __fish_git_prompt_showcolorhints
9	86	-------> __fish_git_prompt_set_color __fish_git_prompt_color_flags
3	3	--------> set -l user_variable_name "$argv[1]"
2	2	--------> set -l default default_done
36	46	--------> switch (count $argv)...
4	4	---------> count $argv
3	3	---------> set default $___fish_git_prompt_color
3	3	---------> set default_done $___fish_git_prompt_color_done
4	4	--------> set -l variable _$user_variable_name
3	3	--------> set -l variable_done "$variable"_done
3	19	--------> if not set -q $variable...
2	2	---------> not set -q $variable
1	14	---------> if test -n "$$user_variable_name"...
3	3	----------> test -n "$$user_variable_name"
5	5	----------> set -g $variable $default
5	5	----------> set -g $variable_done $default_done
9	86	-------> __fish_git_prompt_set_color __fish_git_prompt_color_branch
3	3	--------> set -l user_variable_name "$argv[1]"
3	3	--------> set -l default default_done
31	43	--------> switch (count $argv)...
4	4	---------> count $argv
4	4	---------> set default $___fish_git_prompt_color
4	4	---------> set default_done $___fish_git_prompt_color_done
3	3	--------> set -l variable _$user_variable_name
4	4	--------> set -l variable_done "$variable"_done
2	21	--------> if not set -q $variable...
2	2	---------> not set -q $variable
2	17	---------> if test -n "$$user_variable_name"...
3	3	----------> test -n "$$user_variable_name"
5	5	----------> set -g $variable $default
7	7	----------> set -g $variable_done $default_done
9	87	-------> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
4	4	--------> set -l user_variable_name "$argv[1]"
3	3	--------> set -l default default_done
32	44	--------> switch (count $argv)...
5	5	---------> count $argv
4	4	---------> set default "$argv[2]"
3	3	---------> set default_done "$argv[3]"
3	3	--------> set -l variable _$user_variable_name
4	4	--------> set -l variable_done "$variable"_done
4	20	--------> if not set -q $variable...
2	2	---------> not set -q $variable
3	14	---------> if test -n "$$user_variable_name"...
3	3	----------> test -n "$$user_variable_name"
4	4	----------> set -g $variable $default
4	4	----------> set -g $variable_done $default_done
12	86	-------> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
3	3	--------> set -l user_variable_name "$argv[1]"
2	2	--------> set -l default default_done
31	43	--------> switch (count $argv)...
4	4	---------> count $argv
4	4	---------> set default "$argv[2]"
4	4	---------> set default_done "$argv[3]"
3	3	--------> set -l variable _$user_variable_name
4	4	--------> set -l variable_done "$variable"_done
2	19	--------> if not set -q $variable...
3	3	---------> not set -q $variable
2	14	---------> if test -n "$$user_variable_name"...
4	4	----------> test -n "$$user_variable_name"
4	4	----------> set -g $variable $default
4	4	----------> set -g $variable_done $default_done
27	138	------> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
8	8	-------> set_color red
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l default default_done
34	68	-------> switch (count $argv)...
6	6	--------> count $argv
5	5	--------> set default "$argv[2]"
18	23	--------> set default_done (set_color normal)
5	5	---------> set_color normal
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
2	20	-------> if not set -q $variable...
2	2	--------> not set -q $variable
4	16	--------> if test -n "$$user_variable_name"...
4	4	---------> test -n "$$user_variable_name"
4	4	---------> set -g $variable $default
4	4	---------> set -g $variable_done $default_done
12	97	------> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
4	4	-------> set -l user_variable_name "$argv[1]"
2	2	-------> set -l default default_done
37	51	-------> switch (count $argv)...
6	6	--------> count $argv
4	4	--------> set default "$argv[2]"
4	4	--------> set default_done "$argv[3]"
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
3	20	-------> if not set -q $variable...
2	2	--------> not set -q $variable
1	15	--------> if test -n "$$user_variable_name"...
4	4	---------> test -n "$$user_variable_name"
5	5	---------> set -g $variable $default
5	5	---------> set -g $variable_done $default_done
9	88	------> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
4	4	-------> set -l user_variable_name "$argv[1]"
3	3	-------> set -l default default_done
34	45	-------> switch (count $argv)...
5	5	--------> count $argv
3	3	--------> set default "$argv[2]"
3	3	--------> set default_done "$argv[3]"
4	4	-------> set -l variable _$user_variable_name
4	4	-------> set -l variable_done "$variable"_done
1	19	-------> if not set -q $variable...
3	3	--------> not set -q $variable
4	15	--------> if test -n "$$user_variable_name"...
3	3	---------> test -n "$$user_variable_name"
4	4	---------> set -g $variable $default
4	4	---------> set -g $variable_done $default_done
3	3	-----> set -g ___fish_git_prompt_init
6	6	----> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
34	7937	----> set -l informative (command git config --bool bash.showInformativeStatus)
7903	7903	-----> command git config --bool bash.showInformativeStatus
39	7968	----> set -l dirty (command git config --bool bash.showDirtyState)
7929	7929	-----> command git config --bool bash.showDirtyState
3	10	----> if not set -q dirty[1]...
4	4	-----> not set -q dirty[1]
3	3	-----> set -q __fish_git_prompt_showdirtystate
12	12	----> contains dirtystate $__fish_git_prompt_status_order
36	7358	----> set -l untracked (command git config --bool bash.showUntrackedFiles)
7322	7322	-----> command git config --bool bash.showUntrackedFiles
3	8	----> if not set -q untracked[1]...
3	3	-----> not set -q untracked[1]
2	2	-----> set -q __fish_git_prompt_showuntrackedfiles
8	8	----> contains untrackedfiles $__fish_git_prompt_status_order
4	33	----> if test true = $inside_worktree...
4	4	-----> test true = $inside_worktree
3	20	-----> if test "$informative" = true...
3	3	------> test "$informative" = true
2	4	------> begin...
2	2	-------> set -q __fish_git_prompt_show_informative_status
1	3	------> if test "$dirty" = true...
2	2	-------> test "$dirty" = true
1	3	------> if set -q __fish_git_prompt_showstashstate...
2	2	-------> set -q __fish_git_prompt_showstashstate
2	4	------> if test "$untracked" = true...
2	2	-------> test "$untracked" = true
1	5	-----> if set -q __fish_git_prompt_showupstream...
2	2	------> set -q __fish_git_prompt_showupstream
2	2	------> set -q __fish_git_prompt_show_informative_status
4	4	----> set -l branch_color $___fish_git_prompt_color_branch
5	5	----> set -l branch_done $___fish_git_prompt_color_branch_done
0	3	----> if set -q __fish_git_prompt_showcolorhints...
3	3	-----> set -q __fish_git_prompt_showcolorhints
2	2	----> set -l f ""
12	28	----> for i in $__fish_git_prompt_status_order...
1	4	-----> if test -n "$$i"...
3	3	------> test -n "$$i"
0	3	-----> if test -n "$$i"...
3	3	------> test -n "$$i"
0	3	-----> if test -n "$$i"...
3	3	------> test -n "$$i"
0	3	-----> if test -n "$$i"...
3	3	------> test -n "$$i"
0	3	-----> if test -n "$$i"...
3	3	------> test -n "$$i"
31	37	----> set b (string replace refs/heads/ '' -- $b)
6	6	-----> string replace refs/heads/ '' -- $b
3	3	----> set -q __fish_git_prompt_shorten_branch_char_suffix
5	5	----> set -l __fish_git_prompt_shorten_branch_char_suffix "…"
1	15	----> if string match -qr '^\d+$' "$__fish_git_prompt_shorten_branch_len"...
14	14	-----> string match -qr '^\d+$' "$__fish_git_prompt_shorten_branch_len"
3	11	----> if test -n "$b"...
4	4	-----> test -n "$b"
4	4	-----> set b "$branch_color$b$branch_done"
2	4	----> if test -n "$c"...
2	2	-----> test -n "$c"
1	3	----> if test -n "$r"...
2	2	-----> test -n "$r"
1	3	----> if test -n "$p"...
2	2	-----> test -n "$p"
0	2	----> if test -n "$f"...
2	2	-----> test -n "$f"
5	5	----> set -l format $argv[1]
2	8	----> if test -z "$format"...
3	3	-----> test -z "$format"
3	3	-----> set format " (%s)"
17	17	----> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___fish_git_prompt_color_suffix_done"
132	134	> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/fish_title.fish
2	2	-> function fish_title...
6	236	> fish_title
4	230	-> if not set -q INSIDE_EMACS...
3	3	--> not set -q INSIDE_EMACS
39	223	--> echo (set -q argv[1] && echo $argv[1] || status current-command) (__fish_pwd)
3	3	---> set -q argv[1]
4	4	---> status current-command
43	177	---> __fish_pwd
112	115	----> source /opt/homebrew/Cellar/fish/3.3.1/share/fish/functions/__fish_pwd.fish
3	3	-----> function __fish_pwd --description "Show current path"...
3	19	----> if status test-feature regex-easyesc...
5	5	-----> status test-feature regex-easyesc
11	11	-----> string replace -r '^/cygdrive/(.)?' '\\\U$1:' -- $PWD
431	2603	> _autopair_backspace
1565	1580	-> source /Users/solenoid/.config/fish/functions/_autopair_backspace.fish
15	15	--> function _autopair_backspace...
161	301	-> set --local index (commandline --cursor)
140	140	--> commandline --cursor
108	120	-> set --local buffer (commandline)
12	12	--> commandline
19	19	-> test $index -ge 1
111	137	-> contains -- (string sub --start=$index --length=2 -- "$buffer") $autopair_pairs
26	26	--> string sub --start=$index --length=2 -- "$buffer"
15	15	-> commandline --function backward-delete-char
78	140	> __fish_disable_bracketed_paste exit
62	62	-> printf "\e[?2004l"
36	514	> fish_title exit
19	478	-> if not set -q INSIDE_EMACS...
21	21	--> not set -q INSIDE_EMACS
236	438	--> echo (set -q argv[1] && echo $argv[1] || status current-command) (__fish_pwd)
11	11	---> set -q argv[1]
18	18	---> echo $argv[1]
66	173	---> __fish_pwd
15	107	----> if status test-feature regex-easyesc...
18	18	-----> status test-feature regex-easyesc
74	74	-----> string replace -r '^/cygdrive/(.)?' '\\\U$1:' -- $PWD
124	124	> exit
19	50	> __fish_disable_bracketed_paste
31	31	-> printf "\e[?2004l"
