[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
on_event = ['BufRead', 'CursorHold']
lua_source = '''
require('notify').setup({
  render = "minimal",
  stages = "static",
  timeout = 1000,
})
'''

#[[plugins]]
#repo = 'github/copilot.vim'
#on_cmd = 'Copilot'
#hook_source = '''
#let g:copilot_no_map = v:true
#let g:copilot_hide_during_completion = 0
#imap <silent><expr> <C-g> copilot#Accept()
#imap <silent><expr> <C-n> copilot#Next()
#imap <silent><expr> <C-p> copilot#Previous()
#'''

#[[plugins]]
#repo = 'Exafunction/codeium.vim'
#on_cmd = ['Codeium']
#hook_source = '''
#let g:codeium_disable_bindings = 1
#let g:codeium_render = v:false
#'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
hook_post_update = 'TSUpdate'
lua_source = '''
require('nvim-treesitter.configs').setup {
  ensure_installed = 'all',
  additional_vim_regex_highlighting = true,
  highlight = {
    enable = true,
    disable = function(lang, buf)
      if (lang == 'vimdoc' or
          lang == 'diff' or
          lang == 'gitcommit') then
          return true
      end
      local max_filesize = 50 * 1024 -- 50 KB
      local ok, stats = pcall(vim.loop.fs_stat,
                              vim.api.nvim_buf_get_name(buf))
      if ok and stats and stats.size > max_filesize then
          return true
      end
    end,
  },
}
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
lua_source = '''
-- NOTE: Disable lsp watcher. Too slow on linux
-- https://github.com/neovim/neovim/issues/23725#issuecomment-1561364086
require('vim.lsp._watchfiles')._watchfunc = function()
  return function() end
end

vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    update_in_insert = false,
    virtual_text = {
      format = function(diagnostic)
        return string.format(
          '%s (%s: %s)',
          diagnostic.message,
          diagnostic.source,
          diagnostic.code
        )
      end
    },
})

vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
    -- vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
    vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', '<space>f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
-- https://zenn.dev/kawarimidoll/articles/2b57745045b225
require('mason-lspconfig').setup_handlers({
  function(server_name)
    local nvim_lsp = require('lspconfig')
    local is_node_repo = vim.fn.findfile('package-lock.json', '.;') ~= ''

    local opts = {}

    if server_name == '' then
    elseif server_name == 'vtsls' then
      if not is_node_repo then
        return
      end

      opts.root_dir = nvim_lsp.util.root_pattern('package.json')
    elseif server_name == 'denols' then
      if is_node_repo then
        return
      end

      opts.init_options = {
        lint = true,
        unstable = true,
        documentPreloadLimit = 10,
        suggest = {
          autoImports = false,
          imports = {
            hosts = {
              ['https://deno.land'] = true,
            },
          },
        },
      }
    elseif server_name == 'lua_ls' then
      opts = {
        settings = {
          Lua = {
            runtime = {
              version = 'LuaJIT',
            },
            diagnostics = {
              globals = {
                'vim',
                'require'
              },
            },
            workspace = {
              -- Make the server aware of Neovim runtime files
              library = vim.api.nvim_get_runtime_file("", true),
            },
            telemetry = {
              enable = false,
            },
          },
        },
      }
    end

    nvim_lsp[server_name].setup(opts)
  end
})
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
depends = 'nvim-lspconfig'
on_event = ['BufRead']
lua_source = '''
require('mason').setup()
'''

