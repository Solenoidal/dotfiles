# help
[[plugins]]
repo = 'nanotee/nvim-lua-guide'
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'thinca/vim-quickrun'

# NOTE: error happened from denops-shared-server
[[plugins]]
if = 0
repo = 'goolord/alpha-nvim'
depends = ['nvim-web-devicons']
on_event = 'VimEnter'
lua_source = '''
require('alpha').setup(require('alpha.themes.startify').config)
'''

[[plugins]]
if = 0
repo = 'mrjones2014/legendary.nvim'
on_event = 'VimEnter'

# [[plugins]]
# repo = 'lewis6991/impatient.nvim'
# lua_add = '''
# require('impatient')
# '''

# syntax hilight
# [[plugins]]
# repo = 'cespare/vim-toml'
# [[plugins]]
# repo = 'terrastruct/d2-vim'

# [[plugins]]
# repo = 'mattn/emmet-vim'
# on_ft = [ "html" ]

# # [[plugins]]
# # repo = 'folke/twilight.nvim'
# # on_cmd = 'Twilight'
# # hook_add = '''
# # nnoremap T <Cmd>Twilight<CR>
# # '''
# # hook_source = '''
# # lua << EOF
# #   require("twilight").setup {}
# # EOF
# # '''

## NOTE: sidebar
#[[plugins]]
#repo = 'simrat39/symbols-outline.nvim'
#on_event = 'BufRead'
#depends = 'nvim-lspconfig'
#hook_source = '''
#lua << EOF
#require('symbols-outline').setup {
#  keymaps = {
#    close = 'q'
#  }
#}
#EOF
#'''
# [plugins.ftplugin]
# Outline = '''
# setlocal wrap
# '''
# [[plugins]]
# repo = 'stevearc/aerial.nvim'
# on_event = 'BufRead'
# depends = ['codicons.nvim', 'stickybuf.nvim']
# lua_source = '''
# local codicons = require('codicons')
# require('aerial').setup {
#   backends = {
#     ['_'] = {'lsp', 'treesitter'},
#     -- markdown = {'markdown'},
#     markdown = {'treesitter'},
#     lua = {'treesitter'},
#   },
#   layout = {
#     width = 0.2,
#     placement = 'edge'
#   },
#   filter_kind = false,
#   attach_mode = 'global',
#   -- default_bindings = false,
#   show_guides = true,
#   icons = {
#     markdown = {
#       Interface = codicons.get('list-flat')
#     },
#     Collapsed = codicons.get('chevron-right'),
#   },
# }
# '''
# [[plugins]]
# repo = 'stevearc/stickybuf.nvim'
# lua_source = '''
# require('stickybuf').setup {
#   buftype = {
#     aerial = 'buftype',
#   }
# }
# '''
# [[plugins]]
# repo = 'sidebar-nvim/sidebar.nvim'
# on_event = 'BufRead'
# lua_source = '''
# require('sidebar-nvim').setup {
#  sections = {'symbols','buffers'},
# }
# '''
# [[plugins]]
# repo    = 'liuchengxu/vista.vim'
# depends = ['nvim-lspconfig']
# on_cmd  = ['Vista']

# [[plugins]]
# repo = 'lukas-reineke/headlines.nvim'
# on_ft = ['markdown', 'norg']
# hook_source = '''
# highlight Headline1 guibg=#30365F guifg=#f2ce00
# highlight Headline2 guibg=#30365F guifg=#C8DB01
# highlight Headline3 guibg=#30365F guifg=#ce6f8f
# highlight Dash      guibg=#D19A66 gui=bold
# " highlight CodeBlock guibg=#0f111b
# " highlight Quote guifg=#0099EC
# lua << EOF
# require('headlines').setup {
#   -- markdown = {
#   --   headline_highlights = {'Headline1','Headline2','Headline3'},
#   --   fat_headlines = true,
#   --   fat_headline_upper_string = '▃',
#   --   fat_headline_lower_string = '▀',
#   -- },
#   norg = {
#     query = vim.treesitter.parse_query(
#       "norg",
#       [[
#         [
#           (heading1_prefix)
#           (heading2_prefix)
#           (heading3_prefix)
#           (heading4_prefix)
#           (heading5_prefix)
#           (heading6_prefix)
#         ] @headline
# 
#         (weak_paragraph_delimiter) @dash
#         (strong_paragraph_delimiter) @doubledash
# 
#         ((ranged_tag
#           name: (tag_name) @_name
#           (#eq? @_name "code")
#         ) @codeblock (#offset! @codeblock 0 0 1 0))
# 
#         (quote1_prefix) @quote
#       ]]
#     ),
#     headline_highlights = { "Headline1","Headline2","Headline3" },
#     codeblock_highlight = "CodeBlock",
#     dash_highlight = "Dash",
#     dash_string = "-",
#     doubledash_highlight = "DoubleDash",
#     doubledash_string = "=",
#     quote_highlight = "Quote",
#     -- quote_string = "┃",
#     fat_headlines = false,
#     fat_headline_upper_string = "▃",
#     fat_headline_lower_string = '▀',
#   },
# }
# EOF
# '''

# [[plugins]]
# repo = 'Decodetalkers/csv-tools.lua'
# on_ft = 'csv'

# ## flutter development
# # [[plugins]]
# # repo = 'akinsho/flutter-tools.nvim'
# # depends = ['plenary.nvim']
# # on_ft = 'dart'
# # hook_source = '''
# # lua << EOF
# #   require("flutter-tools").setup {
# #     dev_tools = {
# #       autostart = true
# #     },
# #     lsp = {
# #       on_attach = require("custom.lsp.config").on_attach,
# #       autostart = true
# #     },
# #     widget_guides = {
# #       enabled = true
# #     }
# #   }
# #
# #   require('which-key').register({
# #     ['<Leader>'] = {
# #       F = {
# #         name = '+flutter',
# #         r = {'<cmd>FlutterRun<cr>', 'flutter run'},
# #         R = {'<cmd>FlutterRestart<cr>', 'flutter restart'},
# #         q = {'<cmd>FlutterQuit<cr>', 'flutter quit'},
# #         o = {'<cmd>FlutterOutline<cr>', 'flutter quit'},
# #       }
# #     }
# #   })
# # EOF
# # '''
# # [[plugins]]
# # repo  = 'HerringtonDarkholme/yats.vim'
# # on_ft = ['typescript', 'typescriptreact']
# # [[plugins]]
# # repo = 'itchyny/lightline.vim'
# # on_event = ['CursorHold']
# # hook_add = '''
# # lua_source = '''
# # lua require('custom.lightline')
# # '''
# # [[plugins]]
# # repo = 'mengelbrecht/lightline-bufferline'
# # depends = ['lightline.vim']
# # '''
# # [[plugins]]
# # repo = 'mengelbrecht/lightline-bufferline'
# # depends = ['lightline.vim']
# TODO: ddcと干渉しないように設計したい
# NOTE: 今のところはfishのときしか有効にしていないので大丈夫だと思われる
# [[plugins]]
# repo = 'hrsh7th/nvim-cmp'
# # on_ft = ['fish', 'norg']
# # on_event = 'BufReadPre'
# lua_source = """
# local cmp = require('cmp')
# local mapping = cmp.mapping.preset.insert({
#   ['<C-Space>'] = cmp.mapping.complete(),
#   ['<C-e>'] = cmp.mapping.abort(),
#   ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
#   ['<Tab>'] = function(fallback)
#     if cmp.visible() then
#       cmp.select_next_item()
#     else
#       fallback()
#     end
#   end,
#   ['<S-Tab>'] = function(fallback)
#     if cmp.visible() then
#       cmp.select_prev_item()
#     else
#       fallback()
#     end
#   end,
# })
# cmp.setup.filetype('norg', {
#   sources = {
#     { name = 'neorg' }
#   },
#   mapping = mapping,
# })
# -- cmp.setup.filetype('fish', {
# --   sources = {
# --     { name = 'omni' }
# --   },
# --   mapping = mapping,
# -- })
# """
# [[plugins]]
# repo      = 'hrsh7th/cmp-omni'
# depends   = 'nvim-cmp'
# on_source = ['nvim-cmp']
