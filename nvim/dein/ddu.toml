[[plugins]]
repo = 'Shougo/ddu.vim'
# on_event = 'BufRead'
depends = ['denops.vim']
hook_add = '''
command! DeinUpdate :Ddu dein_update -name=dein_update 
\ -ui-param-winHeight=20 -ui-param-winWidth=60 
\ -ui-param-winRow=2 -ui-param-winCol=10
command! FilerDdu :Ddu 
\ -name=filer -ui=filer -resume
\ file
\ -source-option-columns=icon_filename
\ -source-option-path=`getcwd()`
lua require('custom.ddu.keymap')
'''
hook_source = '''
lua require('custom.ddu')

" call ddu#custom#action('kind', 'file', 'getPath', 'GetFilePaths')
" call ddu#custom#action('source', 'buffer', 'getBufNr', 'GetBufferBufNrs')
call ddu#custom#action('source', 'buffer', 'bdelete', 'DeleteBuffers')
call ddu#custom#action('kind', '_', 'echoItems', 'EchoItems')
call ddu#custom#action('kind', '_', 'getSourceName', 
\ { args -> execute('let b:ddu_source_name = args.items[0].__sourceName') })
call ddu#custom#action('kind', '_', 'echoContext', 'EchoContext')

" function! GetFilePaths(args)
"   let g:ddu#file_paths = []
"   for item in a:args.items
"     call add(g:ddu#file_paths, item.action.path)
"   endfor
" endfunction

" function! GetBufferBufNrs(args)
"   let g:ddu#buffer_bufNr = []
"   for item in a:args.items
"     call add(g:ddu#buffer_bufNr, item.action.bufNr)
"   endfor
" endfunction

function! EchoItems(args)
  let b:ddu_items = a:args.items
  lua vim.notify(vim.inspect(vim.b.ddu_items))
endfunction

function! EchoContext(args) abort
  let b:ddu_context = a:args.context
  lua vim.notify(vim.inspect(vim.b.ddu_context))
endfunction

" function! GetSourceName(args)
"   let b:ddu_source_name = a:args.items[0].__sourceName
" endfunction

function! DeleteBuffers(args)
  for item in a:args.items
    execute 'bdelete ' . item.action.bufNr
  endfor
endfunction
'''

# utility
[[plugins]]
repo    = 'Shougo/ddu-commands.vim'
depends = 'ddu.vim'
on_cmd  = 'Ddu'

# NOTE: ui
[[plugins]]
repo      = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-ff = '''
nnoremap <buffer><silent> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
nnoremap <buffer><silent> <Space>
  \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
nnoremap <buffer><silent> i
  \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
nnoremap <buffer><silent> <C-l>
  \ <Cmd>call ddu#ui#ff#do_action('refreshItems')<CR>
nnoremap <buffer><silent> o
  \ <Cmd>call ddu#ui#ff#do_action('expandItem', {'mode': 'toggle'})<CR>
nnoremap <buffer><silent> p
  \ <Cmd>call ddu#ui#ff#do_action('preview', {'previewCmds': ['bat', '-n', '%s', '-r', '%b:%e', '--highlight-line', '%l']})<CR>
nnoremap <buffer><silent> q
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
nnoremap <buffer><silent> a
  \ <Cmd>call ddu#ui#ff#do_action('chooseAction')<CR>
nnoremap <buffer><silent> c
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'cd'})<CR>
" nnoremap <buffer><silent> d
"  \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'delete'})<CR>
nnoremap <buffer><silent> d
  \ <Cmd>call ddu#ui#ff#multi_actions([
  \   ['itemAction', {'name': 'bdelete'}],
  \   ['refreshItems'],
  \ ])<CR>
nnoremap <buffer><silent> e
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'edit'})<CR>
nnoremap <buffer><silent> v
  \ <Cmd>call ddu#ui#ff#do_action('itemAction',
  \ {'name': 'open', 'params': {'command': 'vsplit'}})<CR>
nnoremap <buffer><silent> N
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'new'})<CR>
nnoremap <buffer><silent> r
  \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'quickfix'})<CR>
nnoremap <buffer><silent> u
  \ <Cmd>call ddu#ui#ff#do_action('updateOptions', {
  \   'sourceOptions': {
  \     '_': {
  \       'matchers': [],
  \     },
  \   },
  \ })<CR>
'''
ddu-ff-filter = '''
inoremap <buffer><silent> <CR>
  \ <Esc><Cmd>close<CR>
nnoremap <buffer><silent> <CR>
  \ <Cmd>close<CR>
nnoremap <buffer><silent> q
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
'''
[[plugins]]
repo      = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
[plugins.ftplugin]
ddu-filer = '''
" auto update
autocmd TabEnter,CursorHold,FocusGained <buffer>
\ call ddu#ui#filer#do_action('checkItems')

lua require('custom.ddu.keymap-filer')

" keymap
" nnoremap <buffer><silent> a
"  \ <Cmd>call ddu#ui#filer#do_action('chooseAction')<CR>
" nnoremap <buffer><silent> q
"  \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>
" nnoremap <buffer><silent> o
"  \ <Cmd>call ddu#ui#filer#do_action('expandItem', {
"  \   'mode': 'toggle'
"  \ })<CR>
" nnoremap <buffer><silent> d <Cmd>call DeleteItem()<CR>
" nmap <buffer><silent> d <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'delete'})<CR>
" nnoremap <buffer> !
"\ <Cmd>call ddu#ui#filer#do_action('updateOptions', {
"\   'sourceOptions': {
"\     '_': {
"\       'matchers': ToggleHidden(),
"\     },
"\   },
"\ })<CR>
" nnoremap <buffer><silent> <CR>
"  \ <Cmd>call ddu#ui#filer#do_action('itemAction',
"  \ {'name': 'open'})<CR>
" 
" function! ToggleHidden()
"   let current = ddu#custom#get_current(b:ddu_ui_name)
"   let source_options = get(current, 'sourceOptions', {})
"   let source_options_all = get(source_options, '_', {})
"   let matchers = get(source_options_all, 'matchers', [])
"   return empty(matchers) ? ['matcher_hidden'] : []
" endfunction

" function! DeleteItem() abort
"   call ddu#ui#filer#do_action('itemAction', {'name': 'getSourceName'})
"   let action = ''
"   if b:ddu_source_name == 'file'
"     let action = 'delete'
"   elseif b:ddu_source_name == 'buffer'
"     let action = 'bdelete'
"   else
"     call ddu#ui#filer#do_action('chooseAction')
"     return
"   endif
"   call ddu#ui#filer#do_action('itemAction', {'name': action})
" endfunction
'''

# NOTE: source
[[plugins]]
repo      = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-source-file_point'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-source-line'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-source-action'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'shun/ddu-source-rg'
on_source = 'ddu.vim'
[[plugins]]
repo      = '4513ECHO/ddu-source-ghq'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'matsui54/ddu-source-help'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'matsui54/ddu-source-command_history'
on_source = 'ddu.vim'
[[plugins]]
repo      = '4513ECHO/ddu-source-colorscheme'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'
depends   = 'mr.vim'
[[plugins]]
repo      = 'lambdalisue/mr.vim'
on_source = 'ddu.vim'
[[plugins]]
repo      = '4513ECHO/ddu-source-source'
on_source = 'ddu.vim'
# [[plugins]]
# repo      = 'gamoutatsumi/ddu-source-nvim-lsp'
# on_source = 'ddu.vim'
# depends   = ['nvim-lspconfig']
[[plugins]]
repo      = 'liquidz/ddu-source-custom-list'
on_source = 'ddu.vim'
[[plugins]]
repo      = '4513ECHO/ddu-source-emoji'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'matsui54/ddu-source-dein_update'
on_source = 'ddu.vim'
[[plugins]]
repo = '4513ECHO/vim-readme-viewer'
on_source = 'ddu.vim'
on_cmd = ['DeinReadme']
hook_add = '''
let g:readme_viewer#plugin_manager = 'dein.vim'
'''

# NOTE: filter
[[plugins]]
repo      = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'
## path情報を見て相対パスに該当するもので絞る
[[plugins]]
repo      = 'Shougo/ddu-filter-matcher_relative'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-filter-converter_display_word'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'yuki-yano/ddu-filter-fzf'
on_source = 'ddu.vim'

# NOTE: kind
[[plugins]]
repo      = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'
[[plugins]]
repo      = 'Shougo/ddu-kind-word'
on_source = 'ddu.vim'

# NOTE: column
[[plugins]]
repo      = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'
# [[plugins]]
# repo      = 'ryota2357/ddu-column-icon_filename'
# on_source = 'ddu.vim'
