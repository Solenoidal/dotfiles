[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
highlight Pabbr       guibg=#1f2335
highlight Pkind       guibg=#1f2335
highlight Pmenu       guibg=#1f2335
highlight Pmatches    guibg=#1f2335
highlight PnormalMenu guibg=#1f2335
highlight PmenuSel    guibg=#3d59a1
" call pum#set_option({
"  \ 'highlight_abbr': 'Pabbr',
"  \ 'highlight_kind': 'Pkind',
"  \ 'highlight_matches': 'Pmathes',
"  \ 'highlight_normal_menu': 'PnormalMenu',
"  \ })
" none, single, double, rounded, solid, shadow, or array like ['╔', '═' ,'╗', '║', '╝', '═', '╚', '║']

call pum#set_option('scrollbar_char', '')
call pum#set_option('use_complete', v:true)
call popup_preview#enable()
" call pum#set_option('border', 'rounded')
" call pum#set_option('padding', v:true)
" autocmd CmdlineEnter * call CmdlinePum()
" autocmd InsertEnter * call BufferPum()

" function! CmdlinePum() abort
"   call pum#set_option('border', 'none')
"   call pum#set_option('padding', v:true)
" endfunction
" 
" function! BufferPum() abort
"   call pum#set_option('border', 'none')
"   call pum#set_option('padding', v:false)
" endfunction
'''
[[plugins]]
repo      = 'matsui54/denops-popup-preview.vim'
on_source = 'pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
call ddc#custom#patch_global('sourceOptions', #{
\ cmdline: #{
\   mark: 'cmdline',
\   forceCompletionPattern: '\S/\S*|\.\w*',
\   dup: 'force',
\   matchers: ['matcher_head'],
\   sorters: ['sorter_rank'],
\   converters: ['converter_remove_overlap'],
\ },
\ })
" call ddc#custom#patch_filetype(['FineCmdlinePrompt'], #{
"    \   keywordPattern: '[0-9a-zA-Z_:#-]*',
"    \   sources: ['cmdline-history'],
"    \   specialBufferCompletion: v:true,
"    \ })
" call ddc#custom#patch_global('cmdlineSources', {
"    \   ':': ['cmdline-history', 'cmdline'],
"    \ })

lua require('custom.ddc')
'''
hook_add = '''
let g:mr_disable_warning = 1
lua require('custom.ddc.keymap')

nnoremap : <Cmd>call CommandlinePre(':')<CR>:
function! CommandlinePre(mode) abort
  set wildchar=<C-t>
  set wildcharm=<C-t>
  cnoremap <expr><buffer> <Tab>
  \ pum#visible() ?
  \  '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ?
  \   ddc#map#manual_complete() : "\<C-t>"
  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  if a:mode ==# ':'
    call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#-]*')
  endif
  autocmd MyAutoCmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd MyAutoCmd InsertEnter <buffer> ++once call CommandlinePost()
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  silent! cunmap <buffer> <Tab>
  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
  set wildcharm=<Tab>
endfunction
'''

## NOTE: ui
[[plugins]]
repo      = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-ui-none'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

## NOTE: source
[[plugins]]
repo      = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/neco-vim'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-source-nextword'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'nabezokodaikon/ddc-nvim-lsp_by-treesitter'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'delphinus/ddc-treesitter'
on_source = 'ddc.vim'

# NOTE: filter
[[plugins]]
repo      = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'tani/ddc-onp'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'matsui54/ddc-matcher_fuzzy'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-converter_truncate_abbr'
on_source = 'ddc.vim'

# NOTE: snippet
[[plugins]]
repo      = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'

# NOTE: skk
[[plugins]]
repo = 'kuuote/ddc-source-suconv'
on_source = 'ddc.vim'
hook_source = '''
function! s:enable() abort
  let b:suconv_spill = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer(#{
  \   sources: ['suconv', 'around', 'file'],
  \   sourceOptions: #{
  \     suconv: #{
  \       converters: [],
  \       matchers: [],
  \       sorters: [],
  \       isVolatile: v:true,
  \     }
  \   },
  \   sourceParams: #{
  \     suconv: #{dictionary: '/Users/solenoid/.config/SKK-JISYO.L'}
  \   }
  \ })
endfunction

function! s:disable() abort
  if has_key(b:, 'suconv_spill')
    call ddc#custom#set_buffer(b:suconv_spill)
    unlet b:suconv_spill
  endif
endfunction

augroup suconv
  autocmd InsertLeave * call s:disable()
augroup END

nnoremap si i<Cmd>call <SID>enable()<CR>
'''
[[plugins]]
repo      = 'Matts966/skk-vconv.vim'
on_source = ['skkeleton']
# [[plugins]]
# repo      = 'delphinus/skkeleton_indicator.nvim'
# on_source = ['skkeleton']
# lua_source = '''
# require'skkeleton_indicator'.setup{}
# '''
[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { ic = '<Plug>(skkeleton-toggle)' }
on_ft = ['markdown', 'norg']
depends = ['ddc.vim', 'denops.vim']
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
autocmd User skkeleton-initialize-pre call s:skkeleton_init()
autocmd User skkeleton-enable-pre     call s:skkeleton_pre()
autocmd User skkeleton-disable-pre    call s:skkeleton_post()

function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'globalJisyo': '~/.config/SKK-JISYO.L',
    \ 'eggLikeNewline': v:true,
    \ 'registerConvertResult': v:true,
    \ 'markerHenkan': '<>',
    \ 'markerHenkanSelect': '>>',
    \ })
  call skkeleton#register_kanatable('rom', {
    \ 'jj': 'escape',
    \ '~': ['〜'],
    \ 'z-': ['-'],
    \ 'z,': [','],
    \ 'z.': ['.'],
    \ 'z/': ['/'],
    \ 'z;': [';'],
    \ 'zh': ['←'],
    \ 'zj': ['↓'],
    \ 'zk': ['↑'],
    \ 'zl': ['→'],
    \ "z\<Space>": ["\u3000"],
    \ })
  call skkeleton#register_keymap('henkan', "\<BS>", 'henkanBackward')
  call skkeleton#register_keymap('henkan', 'x', '')
  call skkeleton#register_keymap('henkan', "\<C-e>", 'escape')
  call skkeleton#register_keymap('input', "\<C-e>", 'escape')
endfunction

function! s:skkeleton_pre() abort
  if &filetype == 'markdown' || &filetype == 'norg'
    call skkeleton#config({
      \ 'keepState': v:true,
      \ })
  else
    call skkeleton#config({
      \ 'keepState': v:false,
      \ })
  endif
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources', ['skkeleton'])
endfunction

function! s:skkeleton_post() abort
  call ddc#custom#set_buffer(s:prev_buffer_config)
endfunction
'''
