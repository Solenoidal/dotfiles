# popup completion menu
[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
highlight Pabbr       guibg=#1f2335
highlight Pkind       guibg=#1f2335
highlight Pmenu       guibg=#1f2335
highlight Pmatches    guibg=#1f2335
highlight PnormalMenu guibg=#1f2335
highlight PmenuSel    guibg=#3d59a1
call pum#set_option({
  \ 'highlight_abbr': 'Pabbr',
  \ 'highlight_kind': 'Pkind',
  \ 'highlight_matches': 'Pmathes',
  \ 'highlight_normal_menu': 'PnormalMenu',
  \ })
" none, single, double, rounded, solid, shadow, or array like ['╔', '═' ,'╗', '║', '╝', '═', '╚', '║']
" call pum#set_option('border', 'rounded')
call pum#set_option('scrollbar_char', '')
" call pum#set_option('padding',v:true)
call pum#set_option('use_complete',v:true)
call popup_preview#enable()
'''
[[plugins]]
repo      = 'matsui54/denops-popup-preview.vim'
on_source = 'pum.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
lua_source = '''
require('custom.ddc')
'''
hook_add = '''
nnoremap ; <Cmd>call CommandlinePre(':')<CR>:

function! CommandlinePre(mode) abort
  " NOTE: It disables default command line completion!
  set wildchar=<C-t>
  set wildcharm=<C-t>

  cnoremap <expr><buffer> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ? ddc#manual_complete() : "\<C-t>"

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  if a:mode ==# ':'
    call ddc#custom#patch_buffer('cmdlineSources',
            \ ['cmdline-history', 'cmdline', 'around'])
    call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#-]*')
  else
    call ddc#custom#patch_buffer('cmdlineSources',
            \ ['around', 'line'])
  endif

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  silent! cunmap <buffer> <Tab>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif

  set wildcharm=<Tab>
endfunction
'''

## NOTE: source
[[plugins]]
repo      = 'Shougo/ddc-around'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-rg'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/neco-vim'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'
# fishでomniしたかったけど全く動く気配がない...
# [[plugins]]
# repo      = 'Shougo/ddc-omni'
# on_source = 'ddc.vim'

# NOTE: filter
[[plugins]]
repo      = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

# NOTE: snippet
[[plugins]]
repo      = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'

# NOTE: skk
[[plugins]]
repo      = 'Matts966/skk-vconv.vim'
on_source = ['skkeleton']
# [[plugins]]
# repo      = 'delphinus/skkeleton_indicator.nvim'
# on_source = ['skkeleton']
# lua_source = '''
# require'skkeleton_indicator'.setup{}
# '''
[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { ic = '<Plug>(skkeleton-toggle)' }
on_event = ['BufRead']
depends = ['ddc.vim', 'denops.vim']
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
"lua vim.notify("onSource skkeleton")
"augroup skkeleton
"  autocmd!
"augroup END
autocmd User skkeleton-initialize-pre call s:skkeleton_init()
autocmd User skkeleton-enable-pre     call s:skkeleton_pre()
autocmd User skkeleton-disable-pre    call s:skkeleton_post()
" autocmd User skkeleton-mode-changed call lightline#update()

function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'globalJisyo': '~/.config/SKK-JISYO.L',
    \ 'eggLikeNewline': v:true,
    \ 'registerConvertResult': v:true,
    \ })
  call skkeleton#config({
    \   'markerHenkan': '<>',
    \   'markerHenkanSelect': '>>',
    \ })
  call skkeleton#register_kanatable('rom', {
    \ 'jj': 'escape',
    \ '~': ['〜'],
    \ 'z-': ['-'],
    \ 'z,': [','],
    \ 'z.': ['.'],
    \ 'z/': ['/'],
    \ 'z;': [';'],
    \ "z\<Space>": ["\u3000"],
    \ })
  call skkeleton#register_keymap('henkan', "\<BS>", 'henkanBackward')
  call skkeleton#register_keymap('henkan', 'x', '')
endfunction

function! s:skkeleton_pre() abort
  if &filetype == 'markdown'
    call skkeleton#config({
      \ 'keepState': v:true,
      \ })
  else
    call skkeleton#config({
      \ 'keepState': v:false,
      \ })
  endif
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources', ['skkeleton'])
  " iunmap <Esc>
endfunction

function! s:skkeleton_post() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
  " inoremap <silent><expr> <Esc> ddc#map#pum_visible() ? '<Cmd>call pum#map#cancel()<CR><Esc>' : '<Esc>'
endfunction
'''
