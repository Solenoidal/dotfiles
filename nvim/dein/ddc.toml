# popup completion menu
[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
" lua vim.notify('onSource pum.vim')
highlight Pabbr       guibg=#1f2335
highlight Pkind       guibg=#1f2335
highlight Pmenu       guibg=#1f2335
highlight Pmatches    guibg=#1f2335
highlight PnormalMenu guibg=#1f2335
highlight PmenuSel    guibg=#3d59a1
call pum#set_option({
  \ 'highlight_abbr': 'Pabbr',
  \ 'highlight_kind': 'Pkind',
  \ 'highlight_matches': 'Pmathes',
  \ 'highlight_normal_menu': 'PnormalMenu',
  \ })
call pum#set_option('border', 'rounded') " none, single, double, rounded, solid, shadow, or array like ['╔', '═' ,'╗', '║', '╝', '═', '╚', '║']
call pum#set_option('scrollbar_char', '')
" call pum#set_option('padding',v:true)
call pum#set_option('use_complete',v:true)
" call popup_preview#enable()
'''
# [[plugins]]
# repo      = 'matsui54/denops-popup-preview.vim'
# on_source = 'pum.vim'

[[plugins]]
repo    = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim', 'nvim-lspconfig']
#on_event = ['BufRead', 'InsertEnter', 'CursorHold']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
" lua vim.notify('onSource ddc.vim')
lua require('custom.ddc')
'''

## NOTE: ddc-source
[[plugins]]
repo      = 'Shougo/ddc-around'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-rg'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/neco-vim'
on_source = 'ddc.vim'
# fishでomniしたかったけど全く動く気配がない...
# [[plugins]]
# repo      = 'Shougo/ddc-omni'
# on_source = 'ddc.vim'

# NOTE: ddc-filter
[[plugins]]
repo      = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

# NOTE: snippet
[[plugins]]
repo      = 'hrsh7th/vim-vsnip'
on_source = 'ddc.vim'
[[plugins]]
repo      = 'hrsh7th/vim-vsnip-integ'
on_source = 'ddc.vim'

# NOTE: skk
[[plugins]]
repo   = 'vim-skk/skkeleton'
on_map = { ic = '<Plug>(skkeleton-toggle)' }
# on_event = ['BufRead']
depends = ['ddc.vim']
hook_add = '''
imap <C-h> <Plug>(skkeleton-toggle)
cmap <C-h> <Plug>(skkeleton-toggle)
'''
hook_source = '''
"lua vim.notify("onSource skkeleton")
autocmd User skkeleton-initialize-pre call s:skkeleton_init()
function! s:skkeleton_init() abort
  call skkeleton#config({
    \ 'globalJisyo': '~/.config/SKK-JISYO.L',
    \ 'eggLikeNewline': v:true,
    \ 'registerConvertResult': v:true,
    \ })
  call skkeleton#config({
    \   'markerHenkan': '<>',
    \   'markerHenkanSelect': '>>',
    \ })
  call skkeleton#register_kanatable('rom', {
    \ 'jj': 'escape',
    \ '~': ['〜', ''],
    \ "z\<Space>": ["\u3000", ''],
    \ })
endfunction

autocmd User skkeleton-enable-pre call s:skkeleton_pre()
function! s:skkeleton_pre() abort
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources', ['skkeleton'])
  iunmap <Esc>
endfunction

autocmd User skkeleton-disable-pre call s:skkeleton_post()
function! s:skkeleton_post() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
  inoremap <silent><expr> <Esc>  ddc#map#pum_visible() ? '<Cmd>call pum#map#cancel()<CR><Esc>' : '<Esc>'
  "inoremap <silent><expr> <CR> ddc#map#pum_visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<CR>'
endfunction
'''
