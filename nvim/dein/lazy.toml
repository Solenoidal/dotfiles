[[plugins]]
repo = 'editorconfig/editorconfig-vim'
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-line'
[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'MunifTanjim/nui.nvim'
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
[[plugins]]
repo = 'mortepau/codicons.nvim'
[[plugins]]
repo = 'rcarriga/nvim-notify'
on_event = 'VimEnter'
on_lua = 'notify'
lua_source = '''
require("notify").setup({
  background_colour = "#000000",
})
vim.notify = require("notify")
'''
[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_event = 'CursorHold'
hook_add = '''
let g:context_filetype#ignore_patterns = {
   \ 'toml': ['^\s*#\s*'],
   \ }
'''
hook_source = '''
function! s:dein_toml_syntax() abort
  if expand('%:p') =~# '\vdein/[^/]+.toml$'
    call dein#toml#syntax()
  endif
endfunction
autocmd MyAutoCmd FileType toml ++nested call timer_start(500, {id -> s:dein_toml_syntax()})
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
hook_add = '''
command! -nargs=0 JunkfileDay call junkfile#open_immediately(strftime('%Y-%m-%d.md'))
'''

[[plugins]]
repo = 'goolord/alpha-nvim'
depends = ['nvim-web-devicons']
on_event = 'VimEnter'
lua_source = '''
require('alpha').setup(require('alpha.themes.startify').config)
'''

[[plugins]]
if = 0
repo = 'folke/noice.nvim'
depends = 'nui.nvim'
on_event = 'CursorHold'
lua_source = '''
require('noice').setup({
  lsp = {
    progress = {
      enabled = false,
    },
  },
  cmdline = {
   enabled = true,
   icons = {
     ['/'] = { icon = '/', hl_group = 'DiagnosticWarn' },
     ['?'] = { icon = '?', hl_group = 'DiagnosticWarn' },
     [':'] = { icon = ':', hl_group = 'DiagnosticInfo', firstc = false },
   },
  },
  popupmenu = {
    enabled = true,
  },
  messages = {
    enabled = true,
  },
  --routes = {
  --  {
  --    view = "split",
  --    filter = { min_width = 500 },
  --  },
  --},
})
'''

[[plugins]]
repo = 'rebelot/heirline.nvim'
depends = 'codicons.nvim'
on_event = ['BufRead', 'VimEnter']
lua_source = '''
require('custom.heirline')
'''

[[plugins]]
if       = 0
repo     = 'mrjones2014/legendary.nvim'
on_event = 'VimEnter'

[[plugins]]
repo    = 'rest-nvim/rest.nvim'
depends = ['plenary.nvim']
on_ft   = 'http'
[plugins.ftplugin]
http = '''
nmap <Leader>rr <Plug>RestNvim
nmap <Leader>rp <Plug>RestNvimPreview
'''

[[plugins]]
repo   = 'folke/trouble.nvim'
on_cmd = ['Trouble', 'TroubleToggle']

lua_source = '''
require('trouble').setup()
'''

[[plugins]]
repo = 'thinca/vim-partedit'
depends = ['context_filetype.vim']
on_cmd = ['Partedit']
on_func = ['partedit#start']
hook_add = '''
let g:partedit#opener = 'tabnew'
function! s:operator_partedit() abort
  let context = context_filetype#get()
  if context.range == [[0, 0], [0, 0]]
    echohl WarningMsg
    echomsg '[partedit] Context is not found'
    echohl NONE
    return
  endif
  call partedit#start(context.range[0][0], context.range[1][0],
        \ {'filetype': context.filetype})
  nnoremap <buffer> q <Cmd>ParteditEnd<Bar>close<CR>
endfunction
nnoremap <C-x><C-x> <Cmd>call <SID>operator_partedit()<CR>
'''
[plugins.ftplugin]
make = '''
let b:partedit_filetype = 'bash'
let b:partedit_prefix = "\<Tab>"
'''

[[plugins]]
if = 1
repo = 'vim-scripts/vim-auto-save'
on_event = 'InsertEnter'
hook_source = '''
let g:auto_save = 1
let g:auto_save_no_updatetime = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_silent = 1
'''

# NOTE: comment
[[plugins]]
if = 0
repo = 'numToStr/Comment.nvim'
depends = ['nvim-treesitter']
on_event = 'VimEnter'
lua_source = '''
require('Comment').setup({
  pre_hook = require('ts_context_commentstring.integrations.comment_nvim').create_pre_hook()
})
'''
[[plugins]]
if = 1
repo = 'mikanIchinose/caw.vim'
on_event = 'CursorHold'
depends = ['context_filetype.vim']
hook_source = '''
let g:caw_integrated_plugin = "context_filetype"
xmap gc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'lfilho/cosco.vim'
on_ft = ['php', 'rust', 'java', 'dart']
hook_source = '''
" autocmd FileType php,rust,java,dart nmap <silent> <Leader>; <Plug>(cosco-commaOrSemiColon)
let g:cosco_filetype_whitelist = ['php', 'rust', 'java', 'dart']
'''

## NOTE: git
[[plugins]]
repo   = 'kdheepak/lazygit.nvim'
on_cmd = 'LazyGit'
[[plugins]]
repo     = 'itchyny/vim-gitbranch'
on_event = 'CursorHold'
[[plugins]]
repo = 'lambdalisue/gin.vim'
depends = 'denops.vim'
on_event = ['CursorHold'] # VimEnterとかするとdenopsが立ち上がってないとか文句言われる
on_cmd = [
  'Gin',
  'GinBranch',
  'GinBuffer',
  'GinChaperon',
  'GinDiff',
  'GinEdit',
  'GinStatus',
]
hook_source = '''
" let g:gin_branch_disable_default_mappings = 1
" let g:gin_chaperon_disable_default_mappings = 1
" let g:gin_diff_disable_default_mappings = 1
" let g:gin_patch_disable_default_mappings = 1
" let g:gin_status_disable_default_mappings = 1
" silent! !git rev-parse --is-inside-work-tree
" if v:shell_error == 0
"   lua require('custom.gin.keymap')
" endif
'''
# [plugins.ftplugin]
# gin = '''
# '''
# gin-branch = '''
# map <buffer><nowait> a <Plug>(gin-action-choice)
# map <buffer><nowait> . <Plug>(gin-action-repeat)
# nmap <buffer><nowait> ? <Plug>(gin-action-help)
# '''
# gin-diff = '''
# map <buffer><nowait> a <Plug>(gin-action-choice)
# map <buffer><nowait> . <Plug>(gin-action-repeat)
# nmap <buffer><nowait> ? <Plug>(gin-action-help)
#
# nmap <buffer> <CR> <Plug>(gin-diffjump-smart)
# '''
# gin-edit = '''
# map <buffer><nowait> a <Plug>(gin-action-choice)
# map <buffer><nowait> . <Plug>(gin-action-repeat)
# nmap <buffer><nowait> ? <Plug>(gin-action-help)
# '''
# gin-status = '''
# map <buffer><nowait> a <Plug>(gin-action-choice)
# map <buffer><nowait> . <Plug>(gin-action-repeat)
# nmap <buffer><nowait> ? <Plug>(gin-action-help)
# '''
[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'VimEnter'
lua_source = '''
require("custom.gitsigns")
'''

## NOTE: lsp
[[plugins]]
repo = 'williamboman/mason.nvim'
[[plugins]]
repo    = 'williamboman/mason-lspconfig.nvim'
depends = 'mason.nvim'
[[plugins]]
repo = 'jayp0521/mason-null-ls.nvim'
depends = 'mason.nvim'
lua_source = '''
require('mason-null-ls').setup({
  automatic_setup = true,
})
'''
[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = ['mason-lspconfig.nvim', 'ddc.vim']
on_event = ['VimEnter', 'BufRead']
lua_source = '''
require('custom.lsp')
'''
[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
depends = ['plenary.nvim', 'mason-null-ls.nvim', 'gitsigns.nvim']
on_event = 'VimEnter'
lua_source = '''
require('custom.null-ls')
'''
[[plugins]]
repo      = 'folke/neodev.nvim'
on_source = ['nvim-lspconfig']
[[plugins]]
repo      = 'lukas-reineke/lsp-format.nvim'
on_source = ['nvim-lspconfig', 'null-ls']

lua_source = '''
require('lsp-format').setup()
'''
[[plugins]]
repo      = 'b0o/SchemaStore.nvim'
on_source = 'nvim-lspconfig'
# on_source = 'nvim-lspconfig'
[[plugins]]
repo      = 'onsails/lspkind.nvim'
on_source = 'nvim-lspconfig'

lua_source = '''
require('lspkind').init {
  mode = 'symbol',
  preset = 'codicons',
}
'''
[[plugins]]
repo      = 'https://git.sr.ht/~whynothugo/lsp_lines.nvim'
on_source = 'nvim-lspconfig'

hook_source = '''
lua require('custom.lsp_lines')
'''
[[plugins]]
repo      = 'folke/lsp-colors.nvim'
on_source = 'nvim-lspconfig'

lua_source = '''
require("lsp-colors").setup()
'''
[[plugins]]
repo      = 'SmiteshP/nvim-navic'
on_source = 'nvim-lspconfig'
[[plugins]]
repo      = 'LumaKernel/vim-tsdetect'
on_source = 'nvim-lspconfig'
[[plugins]]
repo   = 'weilbith/nvim-code-action-menu'
on_cmd = 'CodeActionMemu'
[[plugins]]
if       = 0
repo     = 'lvimuser/lsp-inlayhints.nvim'
on_event = 'LspAttach'

lua_source = '''
require('lsp-inlayhints').setup()
vim.api.nvim_create_augroup("LspAttach_inlayhints", {})
vim.api.nvim_create_autocmd("LspAttach", {
  group = "LspAttach_inlayhints",
  callback = function(args)
    if not (args.data and args.data.client_id) then
      return
    end

    local bufnr = args.buf
    local client = vim.lsp.get_client_by_id(args.data.client_id)
    require("lsp-inlayhints").on_attach(client, bufnr)
  end,
})
'''
[[plugins]]
repo = 'kevinhwang91/promise-async'
[[plugins]]
if      = 1
repo    = 'kevinhwang91/nvim-ufo'
depends = 'promise-async'
# on_event = 'CursorHold'
on_ft = ['typescript']
lua_source = '''
vim.o.foldlevel = 99
vim.o.foldlevelstart = 99
-- vim.o.foldenable = true
vim.o.statuscolumn = '%=%l%s%#FoldColumn#%{foldlevel(v:lnum) > foldlevel(v:lnum - 2) ? (foldclosed(v:lnum) == -1 ? " " : " ") : "  " }%*'

local handler = function(virtText, lnum, endLnum, width, truncate)
    local newVirtText = {}
    local suffix = ('  %d '):format(endLnum - lnum)
    local sufWidth = vim.fn.strdisplaywidth(suffix)
    local targetWidth = width - sufWidth
    local curWidth = 0
    for _, chunk in ipairs(virtText) do
        local chunkText = chunk[1]
        local chunkWidth = vim.fn.strdisplaywidth(chunkText)
        if targetWidth > curWidth + chunkWidth then
            table.insert(newVirtText, chunk)
        else
            chunkText = truncate(chunkText, targetWidth - curWidth)
            local hlGroup = chunk[2]
            table.insert(newVirtText, {chunkText, hlGroup})
            chunkWidth = vim.fn.strdisplaywidth(chunkText)
            -- str width returned from truncate() may less than 2nd argument, need padding
            if curWidth + chunkWidth < targetWidth then
                suffix = suffix .. (' '):rep(targetWidth - curWidth - chunkWidth)
            end
            break
        end
        curWidth = curWidth + chunkWidth
    end
    table.insert(newVirtText, {suffix, 'MoreMsg'})
    return newVirtText
end
local ufo = require('ufo')
ufo.setup({
  fold_virt_text_handler = handler
})

vim.keymap.set('n', 'zR', ufo.openAllFolds)
vim.keymap.set('n', 'zM', ufo.closeAllFolds)

'''

#  NOTE: lspの前には有効化されていないといけない
# [[plugins]]
# repo    = 'google/vim-jsonnet'
# on_ft = 'jsonnet'


#  NOTE: make your own mode
# [[plugins]]
# repo = 'anuvyklack/hydra.nvim'
#
# hook_source = '''
# lua require('custom.hydra')
# '''

[[plugins]]
repo     = "b0o/incline.nvim"
depends  = ['nvim-web-devicons']
on_event = ['BufReadPost', 'VimEnter']

hook_source = '''
command! ToggleIncline lua require("incline").toggle()
'''
lua_source = '''
require("custom.incline")
'''

[[plugins]]
repo     = 'max397574/better-escape.nvim'
on_event = 'InsertEnter'

lua_source = '''
require('better_escape').setup {
  timeout = 200,
}
'''

## debug adapter protocol
# [[plugins]]
# repo = 'mfussenegger/nvim-dap'
# hook_source = '''
# lua <<EOF
#   local dap = require('dap')
#
#   -- flutter settign
#   dap.adapters.dart = {
#     type = "executable",
#     command = "flutter",
#     args = {"debug_adapter"}
#   }
#   require('dap.ext.vscode').load_launchjs(nil, { dart })
# EOF
# '''
# [[plugins]]
# repo = "rcarriga/nvim-dap-ui"
# depends = "nvim-dap"
# hook_source = '''
# lua require("dapui").setup()
# '''

# NOTE: markdown
[[plugins]]
repo  = 'SidOfc/mkdx'
on_ft = 'markdown'

hook_add = '''
let g:mkdx#settings = {
  \ 'map': {
  \   'enable': 0,
  \   'prefix': ',',
  \ },
  \ 'fold': {'enable': 0},
  \ }
'''
[plugins.ftplugin]
markdown = '''
" mapping
nnoremap <buffer> <C-_>  <Plug>(mkdx-promote-header)
nnoremap <buffer> <C-=> <Plug>(mkdx-demote-header)
'''

# NOTE: Neorg
[[plugins]]
repo = 'nvim-neorg/neorg'
depends = ['plenary.nvim', 'nvim-treesitter']
on_ft = 'norg'
lua_source = '''
require('neorg').setup {
  load = {
    ["core.defaults"] = {},
    ["core.keybinds"] = {
      config = {
        default_keybinds = false,
      },
    },
    ["core.norg.concealer"] = {},
    -- ["core.gtd.base"] = {
    --   config = {
    --     workspace = "home"
    --   }
    -- },
    ["core.norg.dirman"] = {
      config = {
        workspaces = {
          home = "~/Documents/notes/norg",
          personal = "~/Documents/notes/norg/personal",
          karabiner = "~/Documents/notes/norg/karabiner",
        },
        index = "index.norg",
      }
    },
    ['core.presenter'] = {
      config = {
        zen_mode = 'zen-mode'
      }
    }
  }
}
'''
[plugins.ftplugin]
norg = '''
lua require('keymap.neorg')
'''
[[plugins]]
repo = 'folke/zen-mode.nvim'
on_source = 'neorg'
lua_source = '''
require('zen-mode').setup()
'''
[[plugins]]
if = 0
repo = 'lukas-reineke/headlines.nvim'
on_ft = ['norg']
hook_source = '''
"highlight Headline1 guibg=#30365F guifg=#f2ce00
"highlight Headline2 guibg=#30365F guifg=#C8DB01
"highlight Headline3 guibg=#30365F guifg=#ce6f8f
"highlight Dash      guibg=#D19A66 gui=bold
" highlight CodeBlock guibg=#0f111b
" highlight Quote guifg=#0099EC
lua << EOF
vim.cmd [[highlight Headline1 guibg=#1e2718]]
vim.cmd [[highlight Headline2 guibg=#21262d]]
vim.cmd [[highlight CodeBlock guibg=#1c1c1c]]
vim.cmd [[highlight Dash guibg=#D19A66 gui=bold]]
require('headlines').setup {
  norg = {
    query = vim.treesitter.parse_query(
      "norg",
      [[
        [
          (heading1_prefix)
          (heading2_prefix)
          (heading3_prefix)
          (heading4_prefix)
          (heading5_prefix)
          (heading6_prefix)
        ] @headline

        (weak_paragraph_delimiter) @dash
        (strong_paragraph_delimiter) @doubledash

        ((ranged_tag
          name: (tag_name) @_name
          (#eq? @_name "code")
        ) @codeblock (#offset! @codeblock 0 0 1 0))

        (quote1_prefix) @quote
      ]]
    ),
    headline_highlights = { "Headline1","Headline2","Headline3" },
    codeblock_highlight = "CodeBlock",
    dash_highlight = "Dash",
    dash_string = "-",
    doubledash_highlight = "DoubleDash",
    doubledash_string = "=",
    quote_highlight = "Quote",
    -- quote_string = "┃",
    fat_headlines = false,
    fat_headline_upper_string = "▃",
    fat_headline_lower_string = '▀',
  },
}
EOF
'''

[[plugins]]
repo = 'folke/todo-comments.nvim'
depends = ['plenary.nvim']
on_event = 'VimEnter'
lua_source = '''
require('todo-comments').setup({
  highlight = {
    multiline = false,
  },
})
'''

[[plugins]]
repo = 'mrjones2014/smart-splits.nvim'
on_event = 'CursorHold'
lua_source = '''
require('custom.smart-splits')
'''
[[plugins]]
repo = 'johann2357/nvim-smartbufs'
on_event = 'CursorHold'
lua_source = '''
require('custom.nvim-smartbufs')
'''
[[plugins]]
repo = 'kwkarlwang/bufresize.nvim'
on_event = 'CursorHold'
lua_source = '''
require('bufresize').setup()
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = "InsertEnter"
hook_source = '''
autocmd FileType ddu-ff,ddu-filer let b:lexima_disabled = 1
call lexima#set_default_rules()
'''

## 囲みを付けたり変更したり
[[plugins]]
repo     = 'machakann/vim-sandwich'
on_event = "InsertEnter"

## color code highlighter
[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_ft = ['toml', 'css', 'sh', 'vim', 'lua']
lua_source = '''
require('colorizer').setup()
'''

# NOTE: treesitter
[[plugins]]
repo             = 'nvim-treesitter/nvim-treesitter'
on_event         = ['BufRead', 'BufNewFile']
hook_post_update = 'TSUpdate'

lua_source = '''
-- require('custom.nvim-treesitter')
require("nvim-treesitter.configs").setup({
	highlight = {
		enable = true,
		additional_vim_regex_highlighting = false,
	},
})

'''
[[plugins]]
repo      = 'windwp/nvim-ts-autotag'
on_source = 'nvim-treesitter'
[[plugins]]
repo = 'https://git.sr.ht/~p00f/nvim-ts-rainbow'
on_source = 'nvim-treesitter'
hook_add = '''
highlight rainbowcol1 guifg=#B2C224
highlight rainbowcol2 guifg=#FECC31
highlight rainbowcol3 guifg=#F9A327
highlight rainbowcol4 guifg=#F6621E
highlight rainbowcol5 guifg=#EE647A
highlight rainbowcol6 guifg=#A463D8
highlight rainbowcol7 guifg=#3FA4D9
'''
# [[plugins]]
# repo      = 'TornaxO7/tree-setter'
# on_source = 'nvim-treesitter'
#[[plugins]]
#repo     = 'haringsrob/nvim_context_vt'
#depends  = 'nvim-treesitter'
#on_event = 'CursorHold'
# [[plugins]]
# repo      = 'romgrk/nvim-treesitter-context'
# on_source = 'nvim-treesitter'
[[plugins]]
repo      = 'JoosepAlviste/nvim-ts-context-commentstring'
on_source = 'nvim-treesitter'
depends   = ['nvim-treesitter']
[[plugins]]
repo    = 'm-demare/hlargs.nvim'
depends = ['nvim-treesitter']
#on_event = 'CursorHold'

lua_source = '''
require('hlargs').setup()
'''

[[plugins]]
repo     = 'tpope/vim-repeat'
on_event = 'CursorHold'

[[plugins]]
repo     = 'lambdalisue/pinkyless.vim'
on_event = 'InsertEnter'

[[plugins]]
if      = 0
repo    = '4513ECHO/denops-gitter.vim'
depends = 'denops.vim'
# on_event = 'CursorHold'
hook_add = '''
let g:gitter#token = $GITTER_PERSONAL_ACCESS_TOKEN
command! StartReadingVimrc new gitter://room/vim-jp/reading-vimrc
'''
[[plugins]]
repo    = 'skanehira/denops-gh.vim'
depends = ['denops.vim', 'ddc.vim']
# on_event = ['CursorHold']
hook_source = '''
augroup gh_ddc
  au!
  au User gh_open_issue call <SID>enableAutoCompletionForGh('gh_issues')
  au User gh_open_issue_assignees call <SID>enableAutoCompletionForGh('gh_issues_assginees')
augroup END

function! s:enableAutoCompletionForGh(kind) abort
  call ddc#custom#patch_buffer('sources', [a:kind])
  call ddc#custom#patch_buffer('specialBufferCompletion', v:true)
  " If you want to complements with japanese, you should add keywordPattern
  call ddc#custom#patch_buffer({'keywordPattern':
        \ "[a-zA-Z0-9_À-ÿ\u30a0-\u30ff\u3040-\u309f\u3005-\u3006\u30e0-\u9fcf]*"})
  let option = {}
  if a:kind ==# 'gh_issues'
    let option = {'gh_issues': {
          \  'matcherKey': 'menu',
          \  'minAutoCompleteLength': 1,
          \ }}
  elseif a:kind ==# 'gh_issues_assginees'
    let option = {'gh_issues_assginees': {
          \  'minAutoCompleteLength': 1,
          \ }}
  endif
  call ddc#custom#patch_buffer('sourceOptions', option)
endfunction
'''

# [[plugins]]
# repo = 'gamoutatsumi/dps-ghosttext.vim'
# depends = ['denops.vim', 'ddc.vim']
# on_cmd = 'GhostStart'
# hook_source = '''
# let g:dps_ghosttext#ftmap = {
#  \ "github.com": "markdown",
#  \ "ghosttext.fregante.com": "markdown",
#  \ "redmine.digitalatelier.jp": "markdown",
#  \ "notion.so": "markdown",
#  \ }
# '''

[[plugins]]
repo = 'mattn/vim-sonictemplate'
#on_event = 'CursorHold'

[[plugins]]
repo = 'Shougo/deol.nvim'
depends = ['ddu.vim']
hook_add = '''
nnoremap <silent><C-s>
  \ <Cmd>Deol fish -no-start-insert -toggle -split=farright<CR>
nnoremap <silent> sD <Cmd>call deol#kill_editor()<CR>
" nnoremap <silent> <C-t> <Cmd>Ddu -name=deol
"   \ -ui-param-split=floating
"   \ -ui-param-winRow=1 -ui-param-autoResize
"   \ -ui-param-cursorPos=`tabpagenr()-1`
"   \ deol<CR>
'''
hook_source = '''
let g:deol#enable_dir_changed = v:false
let g:deol#prompt_pattern = '\w*% \?'
let g:deol#shell_history_path = '~/.zsh-history'
let g:deol#extra_options = {
    \ 'term_kill': 'kill',
    \ }
" call ddu#custom#patch_global({
"    \   'sourceParams': {
"    \     'deol': {
"    \       'command': ['fish'],
"    \     },
"    \   }
"    \ })

tnoremap <ESC> <C-\><C-n>
" tnoremap <expr><C-t> ddc#manual_complete()
" tnoremap <silent><expr> <Tab> pum#visible() ?
"     \ '<Cmd>call pum#map#insert_relative(+1)<CR>' :
"     \ '<Tab>'
" tnoremap <silent><expr> <S-Tab> pum#visible() ?
"     \ '<Cmd>call pum#map#insert_relative(-1)<CR>' :
"     \ '<S-Tab>'
" tnoremap <Down>   <Cmd>call pum#map#select_relative(+1)<CR>
" tnoremap <Up>     <Cmd>call pum#map#select_relative(-1)<CR>
" tnoremap <silent><expr> <C-y>
"     \ pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' : '<C-y>'
" tnoremap <silent><expr> <C-e>
"     \ pum#visible() ? '<Cmd>call pum#map#cancel()<CR>' : '<C-e>'
'''
[plugins.ftplugin]
deol = '''
nnoremap <buffer><silent> gc
\ <Cmd>call deol#send('git commit')<CR>
nnoremap <buffer><silent> gs
\ <Cmd>call deol#send('git status')<CR>
nnoremap <buffer><silent> gA
\ <Cmd>call deol#send('git commit --amend')<CR>
nmap <buffer> e <Plug>(deol_edit)
tmap <buffer> <CR> <Plug>(deol_execute_line)
call ddc#custom#patch_buffer('sourceOptions', {
    \ '_': {
    \   'converters': [],
    \ },
    \ })
'''
